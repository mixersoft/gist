using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Newtonsoft.Json.Linq;
using Profiling;
using System.IO;
using System.Math;
using System.Net;
using System;

using SCG = System.Collections.Generic;

[assembly: ProfSetup(Disabled) ]

module Main
{
	[ ProfDump ]
	private PrintProfileInfo() : void
	{
	}

	private Run() : void
	{
		def parameters = Parameters();
		TaskManager
			( tasks =
				[ LoadJsonDataTask          ():ITask
				, DownloadDataTask          (parameters)
				, ExtractDescriptorsTask    (parameters)
				, ClusterDataTask           (parameters)
				, LoadReferenceClustersTask ()
				, EvaluateClustersTask      ()
				]
			, persistData     = true
			, displayProgress = true
			).Compute();
	}

	private RunThresholdOptimization(min : double, max : double, count : int) : void
	{
		def parameters = MockParameters
			( downloadImagePrefix = ""
			, imageSize           = (0, 0)
			, clusteringThreshold = 0.0
			);

		def taskManager = TaskManager
			( tasks =
				[ LoadJsonDataTask          ():ITask
				, DownloadDataTask          (parameters)
				, ExtractDescriptorsTask    (parameters)
				, ClusterDataTask           (parameters)
				, LoadReferenceClustersTask ()
				, EvaluateClustersTask      ()
				]
			, persistData     = false
			, displayProgress = true
			);

		def taskPath = @"eval\peter-alice.txt";
		def task =
			match (taskManager.Items.Find(item => item.Path == taskPath))
			{
			| Some(item is ClusterEvaluationItem) => item
			| _                                   => throw Exception($"'$taskPath' not found.")
			};

		def Run(threshold)
		{
			parameters.ClusteringThreshold = threshold;

			taskManager.DiscardItemData(@"clusters\peter-alice.txt");
			taskManager.Compute();

			Console.WriteLine($"$threshold\t$(task.Value)");
		}

		Console.WriteLine("Threshold Optimization:");
		def Lerp(step : int)
		{
			min + (max - min) * step / count
		}
		$[0 .. count].Map(Lerp).Iter(Run);
	}

	public Main() : void
	{
		mutable threshold   = None();
		mutable displayHelp = false;
		def opts =
			[ Getopt.CliOption.String
				( "-optimize-threshold"
				, "Optimize the threshold meta-parameter over the given range: 'min max count'."
				, value =>
					regexp match (value)
					{
					| @"(?<min:double>[^ ]+) (?<max:double>[^ ]+) (?<count:int>[^ ]+)" =>
						threshold = Some(min, max, count);
					| _ =>
						Console.WriteLine($"Invalid threshold range: '$value'.");
						displayHelp = true;
					}
				)
			, Getopt.CliOption.Flag
				( "-help"
				, [ "-?" ]
				, "Display this message."
				, () => displayHelp = true
				)
			];
		Getopt.Parse(opts);

		if (displayHelp)
		{
			Console.WriteLine(Getopt.Usage(opts));
		}
		else
		{
			match (threshold)
			{
			| Some((min, max, count)) => RunThresholdOptimization(min, max, count);
			| None                    => Run(); PrintProfileInfo();
			}
		}
	}
}
