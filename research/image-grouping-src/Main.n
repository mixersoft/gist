using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Newtonsoft.Json.Linq;
using Profiling;
using System.IO;
using System.Math;
using System.Net;
using System;

using SCG = System.Collections.Generic;

[assembly: ProfSetup(Disabled) ]

module Main
{
	[ ProfDump ]
	private PrintProfileInfo() : void
	{
	}

	private Run() : void
	{
		def parameters = Parameters();
		def taskManager = TaskManager
			( tasks =
				[ LoadJsonDataTask() : ITask
				, DownloadDataTask(parameters.DownloadImagePrefix)
				, ExtractDescriptorsTask(parameters.ImageSize)
				, ClusterDataTask(parameters.ClusteringThreshold)
				, LoadReferenceClustersTask()
				, EvaluateClustersTask()
				]
			, persistData = true
			);
		Console.WriteLine("Items:");
		taskManager.Items.Iter(Console.WriteLine);
		taskManager.Compute();
	}

	private RunThresholdOptimization(min : double, max : double, count : int) : void
	{
		_ = min;
		_ = max;
		_ = count;
		/*
		def Run(threshold)
		{
			def tasks =
				[ ( DownloadData ("") : ITask, true)
				, ( ExtractDescriptors(0, 0),  true)
				, ( ClusterData (threshold),   false)
				, ( EvaluateClusters(),        false)
				];
			foreach ((task, lazy) in tasks)
			{
				if (lazy)
					TaskManager.LazyExecute(task)
				else
					TaskManager.Execute(task);
			}
			( threshold
			, File.ReadAllText("peter-alice-eval.txt").Trim()
			)
		}

		Console.WriteLine("Threshold Optimization");
		def Lerp(step : int)
		{
			min + (max - min) * step / count
		}
		def results = $[0 .. count].Map(Lerp).Map(Run);
		
		using (file = File.CreateText("threshold results.txt"))
		{
			foreach ((threshold, score) in results)
				file.WriteLine($"$threshold\t$score");
		}
		*/
	}

	public Main() : void
	{
		mutable threshold   = None();
		mutable displayHelp = false;
		def opts =
			[ Getopt.CliOption.String
				( "-optimize-threshold"
				, "Optimize the threshold meta-parameter over the given range: 'min max count'."
				, value =>
					regexp match (value)
					{
					| @"(?<min:double>[^ ]+) (?<max:double>[^ ]+) (?<count:int>[^ ]+)" =>
						threshold = Some(min, max, count);
					| _ =>
						Console.WriteLine($"Invalid threshold range: '$value'.");
						displayHelp = true;
					}
				)
			, Getopt.CliOption.Flag
				( "-help"
				, [ "-?" ]
				, "Display this message."
				, () => displayHelp = true
				)
			];
		Getopt.Parse(opts);

		if (displayHelp)
		{
			Console.WriteLine(Getopt.Usage(opts));
		}
		else
		{
			match (threshold)
			{
			| Some((min, max, count)) => RunThresholdOptimization(min, max, count);
			| None                    => Run(); PrintProfileInfo();
			}
		}
	}
}
