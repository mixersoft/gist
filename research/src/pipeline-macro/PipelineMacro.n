using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Macros;
using Nemerle.Utility;
using System.Collections.Generic;
using System.IO;

using PipelineMacro.Helper;

namespace PipelineMacro
{
	//-------
	// macros
	//-------

	// collect additional data for Parameters fields
	[ Nemerle.MacroUsage
		( Nemerle.MacroPhase.BeforeInheritance
		, Nemerle.MacroTargets.Field
		, Inherited     = false
		, AllowMultiple = false
		)
	]
	macro Parameter
		( _            : TypeBuilder
		, storageField : ParsedField
		, params args  : list[PExpr]
		)
	{
		mutable longName  = null;

		foreach (arg in args)
		{
		| <[ LongName = $(expr:string) ]> => longName = expr;
		| _ => Message.Error("$invalid argument: '$arg'");
		}

		mutable srcName = storageField.Name;

		when (longName == null)
			Message.Error($"missing 'LongName' for the $srcName parameter");

		Parameters ::= ParameterInfo(srcName, longName);
	}

	// mark ITaskItem.Compute parameters as input
	[ Nemerle.MacroUsage
		( Nemerle.MacroPhase.BeforeInheritance
		, Nemerle.MacroTargets.Parameter
		)
	]
	macro InItem
		( builder   : TypeBuilder
		, method    : ParsedMethod
		, parameter : ParsedParameter
		)
	{
		when (method.Name != "Compute")
			Message.Error(method.Location, "InItem can only be used on task Compute parameters");
		ItemArgs ::= ItemArgumentInfo(builder.Name, parameter.Name, true);
	}

	// mark ITaskItem.Compute parameters as output
	[ Nemerle.MacroUsage
		( Nemerle.MacroPhase.BeforeInheritance
		, Nemerle.MacroTargets.Parameter
		)
	]
	macro OutItem
		( builder   : TypeBuilder
		, method    : ParsedMethod
		, parameter : ParsedParameter
		)
	{
		when (method.Name != "Compute")
			Message.Error(method.Location, "InItem can only be used on task Compute parameters");
		ItemArgs ::= ItemArgumentInfo(builder.Name, parameter.Name, false);
	}

	[ Nemerle.MacroUsage
		( Nemerle.MacroPhase.BeforeInheritance
		, Nemerle.MacroTargets.Class
		)
	]
	macro TaskItemInfo
		( builder     : TypeBuilder
		, params args : list[PExpr]
		)
	{
		match (args)
		{
		| [ <[ File($(extension:string)) ]> ] => TaskItemInfos[builder.Name] = TaskItemInfo.File(extension)
		| [ <[ Directory ]> ]                 => TaskItemInfos[builder.Name] = TaskItemInfo.Directory()
		| _ => Message.Hint(builder.Location, "specify one of File(extension) or Directory")
		}
	}

	// main point for automatic convention-based code generation
	[ Nemerle.MacroUsage
		( Nemerle.MacroPhase.BeforeTypedMembers
		, Nemerle.MacroTargets.Assembly
		)
	]
	macro PipelineSetup()
	{
		Setup(ImplicitCTX().Env);
	}

	//---------------
	// implementation
	//---------------

	[ Record ]
	internal class ItemArgumentInfo
	{
		public TypeName : string;
		public ArgName  : string;
		public IsInput  : bool;
	}

	[ Record ]
	internal class ParameterInfo
	{
		public SrcName   : string;
		public LongName  : string;
	}

	internal variant TaskItemInfo
	{
	| Directory
	| File { extension : string }
	}

	internal module Helper
	{
		public mutable Parameters : list[ParameterInfo]    = [];
		public mutable ItemArgs   : list[ItemArgumentInfo] = [];

		public mutable TaskItemInfos : Dictionary.[string, TaskItemInfo] = Dictionary();

		public Setup(env : GlobalEnv) : void
		{
			// create parameters constructor
			match (env.LookupType(["Parameters"]))
			{
			| Some(ty is TypeBuilder) =>
				ty.Define(CreateParametersLoader())
			| _ =>
				Message.Error("Parameters type not found")
			}

			// create task compute methods
			match (env.LookupType(["ITask"]))
			{
			| Some(ty is TypeBuilder) =>
				foreach (superTy in ty.GetAllSubTypes())
				{
					def members = superTy.ParsedDeclaration.GetMembers();
					match (members.Filter(m => m.Name == "Compute"))
					{
					| [ f is ClassMember.Function ] => superTy.Define(CreateTaskCompute(superTy, f))
					| [] => Message.Error
						( superTy.Location
						, $"missing Compute method in $(superTy.Name)"
						)
					| _  => Message.Error
						( superTy.Location
						, $"overloaded Compute method in $(superTy.Name)"
						)
					}
				}
			| _ => Message.Error("ITask interface not found")
			}

			// complete task item implementations
			match (env.LookupType(["ITaskItem"]))
			{
			| Some(ty is TypeBuilder) =>
				foreach (superTy in ty.GetAllSubTypes())
				{
					superTy.Define(<[ decl: [ Accessor ] private name : string ]>);
					superTy.Define(<[ decl: [ Accessor ] private path : string ]>);
					superTy.Define(CreateTaskItemConstructor(superTy));
					superTy.Define(CreateTaskItemHasCache(superTy));
				}
			| _ => Message.Error("ITaskItem interface not found")
			}
		}

		public CreateParametersLoader() : ClassMember
		{
			def CreateParameterInitializer(p)
			{
				// Parse(map["hashed image blur"], out HashedImageBlur);
				<[ Parse(map[$(p.LongName:string)], out $(p.SrcName:dyn)) ]>
			}
			<[ decl:
				public Load(path : string) : void
				{
					def map = Hashtable();
					foreach (line in File.ReadAllLines(path))
						map.Add(SplitParameterLine(line));

					{ ..$(Parameters.Map(CreateParameterInitializer)) }
				}
			]>
		}

		public CreateTaskCompute
			( ty : TypeBuilder
			, f  : ClassMember.Function
			) : ClassMember
		{
			def AsParameterArg(p)
			{
				def ignoreCase = System.StringComparison.OrdinalIgnoreCase;
				Parameters.Find(info => p.Name.Equals(info.SrcName, ignoreCase))
			}
			def AsItemArg(p)
			{
				ItemArgs.Find(info => ty.Name == info.TypeName && p.Name == info.ArgName)
			}
			def MapParameter(p)
			{
				match (AsParameterArg(p))
				{
				| Some(info) => <[ parameters.$(info.SrcName:dyn) ]>
				| None =>
					match (AsItemArg(p))
					{
					| Some(info) when info.IsInput =>
						<[ { def head = inputs.Head; inputs = inputs.Tail; head :> $(p.Type) } ]>
					| Some =>
						<[ { def head = outputs.Head; outputs = outputs.Tail; head :> $(p.Type) } ]>
					| None =>
						Message.Error
							( f.Location
							, $"$(p.Name) is not marked as [InItem] or [OutItem] nor corresponds to a Parameters member"
							);
						<[ ]>
					}
				}
			}
			<[ decl:
				public Compute
					( mutable inputs  : list[ITaskItem]
					, mutable outputs : list[ITaskItem]
					, parameters : Parameters
					) : void
				{
					_ = inputs; _ = outputs; _ = parameters;
					Compute(..$(f.header.Parameters.Map(MapParameter)));
				}
			]>
		}

		public CreateTaskItemConstructor(ty : TypeBuilder) : ClassMember
		{
			def StripSuffix(name, suffix)
			{
				if (name.EndsWith(suffix) && name != suffix)
					name.Substring(0, name.Length - suffix.Length)
				else
					name
			}

			def dir = StripSuffix(ty.Name, "Item");

			def name = match (TaskItemInfos[ty.Name])
			{
			| Directory       => <[ name ]>
			| File(extension) => <[ name + $(extension:string) ]>
			}

			<[ decl:
				public this(name : string)
				{
					this.name = name;
					this.path = System.IO.Path.Combine("work", $(dir:string), $name);
				}
			]>
		}

		public CreateTaskItemHasCache(ty : TypeBuilder) : ClassMember
		{
			match (TaskItemInfos[ty.Name])
			{
			| Directory => <[ decl: public HasCache() : bool { Directory.Exists(path) } ]>
			| File      => <[ decl: public HasCache() : bool { File.Exists(path)      } ]>
			}
		}
	}
}
