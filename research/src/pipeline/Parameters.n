using Nemerle.Collections;
using Nemerle.Utility;
using System.IO.File;
using System;

/// <summary>Meta-parameter source that loads from "parameters.txt".</summary>
class Parameters
{
	public mutable ClusteringThreshold    : double;
	public mutable ColorWeight            : double;
	public mutable DominantColorCount     : int;
	public mutable DownloadImagePrefix    : string;
	public mutable HashedImageBlur        : ImageHash.BlurMethod;
	public mutable HashedImageBpp         : int;
	public mutable HashedImageSize        : int;
	public mutable HashMethod             : ImageHash.HashMethod;
	public mutable ImageSampleSize        : int;
	public mutable ImageSize              : int * int;
	public mutable SimulatedTimelineCount : int;

	public this()
	{
		def ParseBlurMethod(str : string) : ImageHash.BlurMethod
		{
			match (str.SplitToList(' '))
			{
			| ["median", size] => ImageHash.BlurMethod.Median(int.Parse(size))
			| ["gaussian", σ]  => ImageHash.BlurMethod.Gaussian(double.Parse(σ))
			| _ => throw Exception($"Incorrect blur format: '$str'.")
			}
		}
		def ParseHashMethod(str : string) : ImageHash.HashMethod
		{
		| "md5"  => ImageHash.HashMethod.MD5
		| "mean" => ImageHash.HashMethod.Mean
		| _ => throw Exception($"Incorrect hash method: '$str'.")
		}
		def ParseSize(str : string) : int * int
		{
			match (str.SplitToList(' '))
			{
			| [w, h] => (int.Parse(w), int.Parse(h))
			| _ => throw Exception($"Incorrect size format: '$str'.")
			}
		}

		def map = Hashtable();
		foreach (line in ReadAllLines("parameters.txt"))
		{
			def i = line.IndexOf('=');
			def name  = line.Substring(0, i).Trim();
			def value = line.Substring(i + 1).Trim();
			map.Add(name, value);
		}

		ClusteringThreshold    = map["clustering threshold"]     |> double.Parse;
		ColorWeight            = map["color component weight"]   |> double.Parse;
		DominantColorCount     = map["dominant color count"]     |> int.Parse;
		DownloadImagePrefix    = map["download image prefix"];
		HashedImageBlur        = map["hashed image blur"]        |> ParseBlurMethod;
		HashedImageBpp         = map["hashed image bpp"]         |> int.Parse;
		HashedImageSize        = map["hashed image size"]        |> int.Parse;
		HashMethod             = map["hash method"]              |> ParseHashMethod;
		ImageSampleSize        = map["image sample size"]        |> int.Parse;
		ImageSize              = map["image size"]               |> ParseSize;
		SimulatedTimelineCount = map["simulated timeline count"] |> int.Parse;

		when (ColorWeight < 0.0)
			throw ArgumentException("Color component weight must be non-negative.");
		when (DominantColorCount < 0)
			throw ArgumentException("Dominant color count must be non-negative.");
		when (HashedImageBpp < 0 || HashedImageBpp > 8)
			throw ArgumentException("bpp must be between 0 and 8");
	}
}
