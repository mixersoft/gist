using Nemerle.Collections;
using Nemerle.Utility;
using PipelineMacro;
using System.IO.File;
using System;

/// <summary>Meta-parameter source that loads from "parameters.txt".</summary>
public class Parameters
{
	//----------------
	// meta-parameters
	//----------------

	[ Parameter(ShortName = "ClThr", LongName = "clustering threshold") ]
	public mutable ClusteringThreshold : double;

	[ Parameter(ShortName = "ClrW", LongName = "color component weight") ]
	public mutable ColorWeight : double;

	[ Parameter(ShortName = "ClrN", LongName = "dominant color count") ]
	public mutable DominantColorCount : int;

	[ Parameter(ShortName = "ImgPre", LongName = "download image prefix") ]
	public mutable DownloadImagePrefix : string;

	[ Parameter(ShortName = "HshBlr", LongName = "hashed image blur") ]
	public mutable HashedImageBlur : ImageHash.BlurMethod;

	[ Parameter(ShortName = "HshBpp", LongName = "hashed image bpp") ]
	public mutable HashedImageBpp : int;

	[ Parameter(ShortName = "HshSz", LongName = "hashed image size") ]
	public mutable HashedImageSize : int;

	[ Parameter(ShortName = "Hsh", LongName = "hash method") ]
	public mutable HashMethod : ImageHash.HashMethod;

	[ Parameter(ShortName = "ImgSpl", LongName = "image sample size") ]
	public mutable ImageSampleSize : int;

	[ Parameter(ShortName = "ImgSz", LongName = "image size") ]
	public mutable ImageSize : int * int;

	[ Parameter(ShortName = "TlN", LongName = "simulated timeline count") ]
	public mutable SimulatedTimelineCount : int;

	//-----------------------
	// implementation methods
	//-----------------------

	private SplitParameterLine(line : string) : string * string
	{
		def i = line.IndexOf('=');
		def name  = line.Substring(0, i).Trim();
		def value = line.Substring(i + 1).Trim();
		(name, value);
	}

	//--------
	// parsing
	//--------

	private Parse(text : string, value : out double) : void
	{
		value = double.Parse(text);
	}

	private Parse(text : string, value : out int) : void
	{
		value = int.Parse(text);
	}

	private Parse(text : string, value : out ImageHash.BlurMethod) : void
	{
		value = match (text.SplitToList(' '))
		{
		| ["median", size] => ImageHash.BlurMethod.Median(int.Parse(size))
		| ["gaussian", σ]  => ImageHash.BlurMethod.Gaussian(double.Parse(σ))
		| _ => throw Exception($"Incorrect blur format: '$text'.")
		}
	}

	private Parse(text : string, value : out ImageHash.HashMethod) : void
	{
		value = match (text)
		{
		| "md5"  => ImageHash.HashMethod.MD5
		| "mean" => ImageHash.HashMethod.Mean
		| _ => throw Exception($"Incorrect hash method: '$text'.")
		}
	}

	private Parse(text : string, value : out int * int) : void
	{
		value = match (text.SplitToList(' '))
		{
		| [w, h] => (int.Parse(w), int.Parse(h))
		| _ => throw Exception($"Incorrect size format: '$text'.")
		}
	}

	private Parse(text : string, value : out string) : void
	{
		value = text;
	}
}
