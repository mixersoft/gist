using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using PipelineMacro;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System;

[ Record ]
class DetectFacesTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach (images is ImageCollectionItem in items)
			mappings ::= TaskMapping(this, [ images ], [ FacesItem(images.Name) ]);
		mappings;
	}

	private Compute
		( [InItem]  images : ImageCollectionItem
		, [OutItem] faces  : FacesItem
		) : void
	{
		mutable imageFaces = Hashtable();

		def haar = HaarCascade(@"data\assets\haarcascade_frontalface_default.xml");

		foreach (id in images.ImageIDs)
		{
			Console.Write('*');
			using (img = Image.[Gray, byte](images.MakePath(id)))
			{
				def rects = haar.Detect
					( image        = img
					, scaleFactor  = 1.8
					, minNeighbors = 3
					, flag         = 0
					, minSize      = Size.Empty
					, maxSize      = Size.Empty
					);
				when (rects.Length > 0)
					imageFaces[id] = rects.Map(_.rect);
			}
		}
		Console.WriteLine();

		faces.ImageFaces = imageFaces;
	}
}
