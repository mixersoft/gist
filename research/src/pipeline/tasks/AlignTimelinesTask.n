using Nemerle.Collections;
using Nemerle.Utility;
using PipelineMacro;
using System.IO;
using System;

[ Record ]
class AlignTimelinesTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach (item is JsonItem in items)
			mappings ::= TaskMapping(this, [ item ], [ TimelineAlignmentItem(item.Name) ]);
		mappings;
	}

	private Compute
		( [InItem]  json               : JsonItem
		, [OutItem] timelineAlignments : TimelineAlignmentItem
		) : void
	{
		def random     = Random(0);
		def eventCount = 5;
		def MapPhoto(photo)
		{
			TimelineAlignmentItem.Photo
				( photo.ID
				, photo.DateTaken
				, random.Next(eventCount)
				)
		}
		def MapID(id)
		{
			TimelineAlignmentItem.Timeline
				( offset = random.Next(24)
				, photos = json.Photos
					.FilterToArray(photo => photo.CameraID == id)
					.Map(MapPhoto)
				)
		}

		timelineAlignments.EventCount = eventCount;
		timelineAlignments.Timelines  = json.Photos
			.Fold(Set(), (photo, ids) => ids.Replace(photo.CameraID))
			.MapToArray(MapID);
	}
}
