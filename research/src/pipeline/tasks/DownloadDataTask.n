using Nemerle.Collections;
using Nemerle.Utility;
using PipelineMacro;
using System.IO;
using System.Net;
using System;

class DownloadDataTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach (item is JsonItem in items)
			mappings ::= TaskMapping(this, [ item ], [ ImageCollectionItem(item.Name) ]);
		mappings;
	}

	private Compute
		( [InItem]  json   : JsonItem
		, [OutItem] images : ImageCollectionItem
		, downloadImagePrefix : string
		, baseDataUrl         : string
		) : void
	{
		def downloadPrefix = "/" + downloadImagePrefix;

		def client = WebClient();

		images.ImageIDs = array(json.Photos.Length);

		_ = Directory.CreateDirectory(Path.GetDirectoryName(images.Path));
		DirectoryEx.Recreate(images.Path);

		def baseUrl = baseDataUrl + json.BaseUrl;

		foreach (photo in json.Photos with i)
		{
			Console.Write('*');
			def address = baseUrl + photo.RootSrc.Replace("/", downloadPrefix);
			try
			{
				client.DownloadFile(address, images.MakePath(photo.ID));
				images.ImageIDs[i] = photo.ID;
			}
			catch
			{
			| _ => Console.Write("\nFailed to download '{0}'.", address);
			}
		}
		Console.WriteLine();
	}
}
