using Nemerle.Collections;
using Nemerle.Utility;
using PipelineMacro;
using System.IO;
using System.Net;
using System;

class DownloadDataTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach (item is JsonItem when item.Path.StartsWith(@"data\") in items)
		{
			def path = Path.Combine("images", Path.GetFileNameWithoutExtension(item.Path));
			mappings ::= TaskMapping(this, [ item ], [ ImageCollectionItem(path) ]);
		}
		mappings;
	}

	private Compute
		( [InItem]  jsonItem : JsonItem
		, [OutItem] images   : ImageCollectionItem
		, downloadImagePrefix : string
		) : void
	{
		def downloadPrefix = "/" + downloadImagePrefix;

		def client = WebClient();

		images.ImageIDs = array(jsonItem.Photos.Length);

		_ = Directory.CreateDirectory(Path.GetDirectoryName(images.Path));
		_ = Directory.CreateDirectory(images.Path);

		foreach (photo in jsonItem.Photos with i)
		{
			_ = Directory.CreateDirectory(Path.GetDirectoryName(images.Path));
			client.DownloadFile
				( address  = jsonItem.BaseUrl + photo.RootSrc.Replace("/", downloadPrefix)
				, fileName = images.MakePath(photo.ID)
				);
			images.ImageIDs[i] = photo.ID;
		}
	}
}
