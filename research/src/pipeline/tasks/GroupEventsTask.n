using Nemerle.Collections;
using PipelineMacro;
using System.Collections.Generic;
using System.Math;
using System;

class GroupEventsTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach (item is JsonItem in items)
			mappings ::= TaskMapping(this, [ item ], [ EventGroupItem(item.Name) ]);
		mappings;
	}

	private Compute
		( [InItem]  json      : JsonItem
		, [OutItem] events    : EventGroupItem
		, kdeWindow           : double
		, msIterationCount    : int
		, msKernel            : MeanShiftKernel
		, fineEventSpacing    : double
		, coarseEventSpacing  : double
		, dayQuota            : int
		) : void
	{
		// returns the list of indices at which new groups begin
		// assumes the data is sorted in increasing order
		def Aggregate(data, step)
		{
			def events = List();
			when (data.Length > 0)
			{
				mutable prev = data[0];
				for (mutable i = 1; i != data.Length; ++i)
				{
					when (data[i] - prev > step)
						events.Add(i);
					prev = data[i];
				}
				events.Add(data.Length);
			}
			events.ToArray();
		}
		def AverageGroup(data, separators)
		{
			def means = array(separators.Length);
			mutable i = 0;
			foreach (separator in separators with j)
			{
				mutable acc, n;
				while (i != separator)
					(acc, n, i) = (acc + data[i], n + 1, i + 1);
				means[j] = acc / n;
			}
			means;
		}
		def FilterData(indices, noise)
		{
			def result = List();
			foreach (i when !noise.Contains(i) in indices)
				result.Add(i);
			result.ToArray();
		}
		def FindEvents(indices, times, spacing)
		{
			def IsFarFromNext(i)
			{
				def curr = times[indices[i]];
				def next = times[indices[i+1]];
				next - curr > spacing;
			}
			def events = List();
			def e = List();
			for (mutable i = 0; i < indices.Length; ++i)
			{
				e.Add(indices[i]);
				when (i + 1 == indices.Length || IsFarFromNext(i))
				{
					events.Add(e.ToArray());
					e.Clear();
				}
			}
			events.ToArray();
		}
		def FindNoise(separators)
		{
			mutable noiseData   = Set();
			mutable noiseGroups = Set();
			mutable prev = 0;
			foreach (separator in separators with i)
			{
				when (separator - prev < dayQuota)
				{
					noiseData   = noiseData.AddList($[prev .. separator - 1]);
					noiseGroups = noiseGroups.Add(i);
				}
				prev = separator;
			}
			(noiseData, noiseGroups);
		}
		def MeanShift(data, window)
		{
			def hFactor = 1.0 / (window * window);
			def n       = data.Length;

			def GetRange(i, support)
			{
				def (lo, hi) = (data[i] - support, data[i] + support);
				mutable min = i - 1;
				while (min >= 0 && data[min] >= lo)
					--min;
				++min;
				mutable max = i + 1;
				while (max < n && data[max] <= hi)
					++max;
				(min, max);
			}

			def modes = array(n);
			data.CopyTo(modes, 0);

			repeat (msIterationCount)
			{
				for (mutable i = 0; i != n; ++i)
				{
					mutable xi    = modes[i];
					mutable mode  = 0.0;
					mutable total = 0.0;
					match (msKernel)
					{
					| MeanShiftKernel.Epanechnikov =>
						def (minJ, maxJ) = GetRange(i, window);
						for (mutable j = minJ; j != maxJ; ++j)
						{
							def xj = data[j];
							def w = 1.0 - hFactor * (xi - xj) * (xi - xj);
							when (w > 0.0)
							{
								total += w;
								mode += xj * w;
							}
						}
					| MeanShiftKernel.Gaussian =>
						def (minJ, maxJ) = GetRange(i, window * 5.0);
						for (mutable j = minJ; j != maxJ; ++j)
						{
							def xj = data[j];
							def w = Exp(-0.5 * hFactor * (xi - xj) * (xi - xj));
							total += w;
							mode += xj * w;
						}
					}
					modes[i] = mode / total;
				}
			}
			modes;
		}

		def ticksPerDay        = 24 * 60 * 60 * 10_000_000;
		def coarseEventSpacing = coarseEventSpacing * ticksPerDay;
		def fineEventSpacing   = fineEventSpacing * ticksPerDay;
		def window             = kdeWindow * ticksPerDay;
		def groupSpacing       = 0.1 * window;


		def dates = json.Photos.MapToArray(_.DateTaken);
		Array.Sort(dates);

		def times = dates.Map(date => date.Ticks :> double);

		def modes = MeanShift(times, window);

		events.DayGroups = Aggregate(modes, groupSpacing);
		events.DayTimes  = AverageGroup(modes, events.DayGroups);

		def (noiseTimes, noiseDays) = FindNoise(events.DayGroups);
		events.NoiseDays = noiseDays.ToArray();

		def filteredTimes = FilterData($[1..times.Length-1].ToArray(), noiseTimes);

		events.CoarseGroups = FindEvents(filteredTimes, times, coarseEventSpacing);

		events.FineGroups = events.CoarseGroups
			.Map(FindEvents(_, times, fineEventSpacing))
			.Flatten()
			.NToArray();
	}
}
