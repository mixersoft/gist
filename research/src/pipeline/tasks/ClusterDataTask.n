using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using Nemerle.Utility;
using PipelineMacro;
using Profiling;
using System.IO;
using System;

using SCG = System.Collections.Generic;

class ClusterDataTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach (item is DescriptorItem in items)
			mappings ::= TaskMapping(this, [ item ], [ ClusterItem(item.Name) ]);
		mappings;
	}

	// QT clustering algorithm
	[ Profile(Recursive) ]
	private Compute
		( [InItem]  descriptors : DescriptorItem
		, [OutItem] result      : ClusterItem
		, clusteringThreshold   : double
		) : void
	{
		def Cluster(descriptors) : array[array[string]]
		{
			def CreateThresholdMap()
			{
				def sqThreshold = clusteringThreshold * clusteringThreshold;

				def map = array(descriptors.Length, descriptors.Length);
				for (mutable i = 0; i != descriptors.Length; ++i)
				for (mutable j = 0; j != descriptors.Length; ++j)
				{
					def d1 = descriptors[i].Data;
					def d2 = descriptors[j].Data;
					map[i, j] = SqDistance(d1, d2) < sqThreshold;
				}
				map;
			}
			def withinThreshold = CreateThresholdMap();

			def indices = SCG.List($[0 .. descriptors.Length - 1]);

			def CountNear(i)
			{
				mutable count = 0;
				foreach (j when indices.Contains(j) && withinThreshold[i, j] in indices)
					++count;
				count;
			}

			def ChooseLargest(counts)
			{
				mutable maxCount = 0;
				mutable maxIndex = 0;
				foreach (count in counts with i)
				{
					when (count > maxCount)
					{
						maxCount = count;
						maxIndex = indices[i];
					}
				}
				mutable cluster = array(maxCount);
				mutable k       = 0;
				foreach (j when indices.Contains(j) && withinThreshold[maxIndex, j] in indices)
				{
					cluster[k] = j;
					++k;
				}
				cluster;
			}

			def Remove(cluster)
			{
				foreach (item in cluster)
					_ = indices.Remove(item);
			}

			mutable clusters = [];
			while (indices.Count > 0)
			{
				clusters ::= ChooseLargest(indices.Map(CountNear));
				Remove(clusters.Head);
			}
			clusters.Map(cluster => cluster.Map(i => descriptors[i].ID))
				.Reverse().ToArray();
		}

		result.Clusters = Cluster(descriptors.Descriptors);
	}

	private SqDistance(v1 : array[double], v2 : array[double]) : double
	{
		unchecked
		{
			mutable sum = 0.0;
			for (mutable i = 0; i != v1.Length; ++i)
			{
				def δ = v1[i] - v2[i];
				sum += δ * δ;
			}
			sum;
		}
	}
}
