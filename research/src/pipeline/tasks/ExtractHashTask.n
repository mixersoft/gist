using Nemerle.Collections;
using PipelineMacro;
using System.Drawing;
using System;

class ExtractHashTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		def imageSample = items.TypedFind(item : ImageCollectionItem => item.Path == "image-sample").Value;
		[ TaskMapping(this, [ imageSample ], [ ImageHashItem(@"eval\hashes.txt") ]) ]
	}

	private Compute
		( [InItem]  imageSample : ImageCollectionItem
		, [OutItem] hashes      : ImageHashItem
		, hashMethod      : ImageHash.HashMethod
		, hashedImageSize : int
		, hashedImageBpp  : int
		) : void
	{
		def Hash(id, map)
		{
			using (bmp = Bitmap(imageSample.MakePath(id)))
				map.Add(id, ImageHash.GetHashCode(bmp, hashMethod, hashedImageSize, hashedImageBpp));
		}
		hashes.ImageHashes = imageSample.ImageIDs.Fold(Map(), Hash);
	}
}
