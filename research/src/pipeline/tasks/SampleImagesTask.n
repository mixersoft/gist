using Nemerle.Collections;
using PipelineMacro;
using System.IO;
using System;

class SampleImagesTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable images = [];
		foreach (item is ImageCollectionItem when item.Path.StartsWith(@"images\") in items)
			images ::= item;
		def sample = ImageCollectionItem("image-sample");
		[ TaskMapping(this, images.Map(_ : ITaskItem), [ sample ]) ];
	}

	private Compute
		( [InItem]  images : list[ImageCollectionItem]
		, [OutItem] sample : ImageCollectionItem
		, imageSampleSize : int
		) : void
	{
		def random = Random(0);

		def n = images.Fold(0, (item, sum) => sum + item.ImageIDs.Length);
		mutable indices = Set();
		while (indices.Count < imageSampleSize)
		{
			def index = random.Next(n);
			unless (indices.Contains(index))
				indices = indices.Add(index);
		}

		_ = Directory.CreateDirectory(sample.Path);

		mutable ids = [];
		foreach (index in indices)
		{
			mutable l = images;
			mutable i = index;
			while (i > l.Head.ImageIDs.Length)
			{
				i -= l.Head.ImageIDs.Length;
				l = l.Tail;
			}
			def id = l.Head.ImageIDs[i];
			ids ::= id;
			File.Copy
				( sourceFileName = l.Head.MakePath(id)
				, destFileName   = sample.MakePath(id)
				);
		}
		sample.ImageIDs = ids.ToArray();
	}
}
