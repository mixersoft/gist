using Nemerle.Collections;
using PipelineMacro;
using System.IO;
using System;

class SampleImagesTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach (item is ImageCollectionItem in items)
			mappings ::= TaskMapping(this, [ item ], [ SampleImageCollectionItem(item.Name) ]);
		mappings;
	}

	private Compute
		( [InItem]  images : ImageCollectionItem
		, [OutItem] sample : SampleImageCollectionItem
		, imageSampleSize : int
		) : void
	{
		def randomIDs = images.ImageIDs.Clone() :> array[string];
		randomIDs.RandomShuffle(Random(0));

		sample.ImageIDs = array(Math.Min(randomIDs.Length, imageSampleSize));
		Array.Copy(randomIDs, 0, sample.ImageIDs, 0, sample.ImageIDs.Length);

		_ = Directory.CreateDirectory(sample.Path);
		foreach (id in sample.ImageIDs)
		{
			File.Copy
				( sourceFileName = images.MakePath(id)
				, destFileName   = sample.MakePath(id)
				);
		}
	}
}
