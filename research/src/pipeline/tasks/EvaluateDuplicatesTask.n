using Nemerle.Collections;
using PipelineMacro;
using System.Collections.Generic;
using System;

public class EvaluateDuplicatesTask: ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach ((name, autos, refs, json) in items.Join.[DuplicatesItem, DuplicatesRefItem, JsonItem]())
		{
			mappings ::= TaskMapping
				( this
				, [ autos, refs, json ]
				, [ DuplicatesEvaluationItem(name) ]
				);
		}
		mappings;
	}

	private Compute
		( [InItem]  autos  : DuplicatesItem
		, [InItem]  refs   : DuplicatesRefItem
		, [InItem]  json   : JsonItem
		, [OutItem] result : DuplicatesEvaluationItem
		) : void
	{
		def GatherIndices()
		{
			mutable indices = Set();
			mutable i = 1;
			foreach (group in autos.ImageIDs)
			for (mutable j = 0; j != group.Length; ++j)
			{
				when (j != 0)
					indices = indices.Add(i);
				++i;
			}
			indices;
		}

		def refs = Set(refs.Indices);
		def auto = GatherIndices();

		def photos = json.Photos.Sort(_.DateTaken);
		def GetPhotoID(i) { photos[i - 1].ID }

		result.FalsePositives = auto.Subtract(refs).ToArray().Map(GetPhotoID);
		result.FalseNegatives = refs.Subtract(auto).ToArray().Map(GetPhotoID);
		result.Score = result.FalsePositives.Length + result.FalseNegatives.Length;
	}
}
