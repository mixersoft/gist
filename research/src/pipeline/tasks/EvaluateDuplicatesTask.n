using Nemerle.Collections;
using PipelineMacro;
using System.Collections.Generic;
using System;

public class EvaluateDuplicatesTask: ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		def refs = Dictionary();
		foreach (item is DuplicatesRefItem in items)
			refs[item.Name] = item;

		def json = Dictionary();
		foreach (item is JsonItem in items)
			json[item.Name] = item;

		def IsValid(item) { refs.ContainsKey(item.Name) && json.ContainsKey(item.Name) }

		// map those clusters for which there are references
		mutable mappings = [];
		foreach (item is DuplicatesItem when IsValid(item) in items)
		{
			def name = item.Name;
			mappings ::= TaskMapping
				( this
				, [ item, refs[name], json[name] ]
				, [ DuplicatesEvaluationItem(name) ]
				);
		}
		mappings;
	}

	private Compute
		( [InItem]  autoDuplicates : DuplicatesItem
		, [InItem]  refDuplicates  : DuplicatesRefItem
		, [InItem]  json           : JsonItem
		, [OutItem] result         : DuplicatesEvaluationItem
		) : void
	{
		def GatherIndices()
		{
			mutable indices = Set();
			mutable i = 1;
			foreach (group in autoDuplicates.ImageIDs)
			for (mutable j = 0; j != group.Length; ++j)
			{
				when (j != 0)
					indices = indices.Add(i);
				++i;
			}
			indices;
		}

		def refs = Set(refDuplicates.Indices);
		def auto = GatherIndices();

		def photos = json.Photos.Sort(_.DateTaken);
		def GetPhotoID(i) { photos[i - 1].ID }

		result.FalsePositives = auto.Subtract(refs).ToArray().Map(GetPhotoID);
		result.FalseNegatives = refs.Subtract(auto).ToArray().Map(GetPhotoID);
		result.Score = result.FalsePositives.Length + result.FalseNegatives.Length;
	}
}
