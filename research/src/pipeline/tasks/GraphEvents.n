using Nemerle.Collections;
using PipelineMacro;
using System.Collections.Generic;
using System.Drawing.Drawing2D;
using System.Drawing;
using System.Math;
using System;

class GraphEvents : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		def eventItems = Hashtable();
		foreach(item is EventItem in items)
			eventItems[item.Name] = item;

		def thumbItems = Hashtable();
		foreach(item is ThumbnailCollectionItem in items)
			thumbItems[item.Name] = item;

		def IsValid(name) { eventItems.Contains(name) && thumbItems.Contains(name) }

		mutable mappings = [];
		foreach (item is JsonItem when IsValid(item.Name) in items)
		{
			def name = item.Name;
			mappings ::= TaskMapping
				( this
				, [ item, eventItems[name], thumbItems[name] ]
				, [ EventGraphItem(name) ]
				);
		}
		mappings;
	}

	private Compute
		( [InItem]  json      : JsonItem
		, [InItem]  refEvents : EventItem
		, [InItem]  thumbs    : ThumbnailCollectionItem
		, [OutItem] graph     : EventGraphItem
		, kdeWindow           : double
		, msIterationCount    : int
		, msKernel            : MeanShiftKernel
		, fineEventSpacing    : double
		, coarseEventSpacing  : double
		, dayQuota            : int
		, thumbHeight         : int
		) : void
	{
		def (w, h, y) = (1600, 128, 64);
		def dataY        = 64;
		def dayEventY    = 80;
		def coarseEventY = 96;
		def fineEventY   = 112;
		def thumbLimit   = 12;

		// returns the list of indices at which new groups begin
		// assumes the data is sorted in increasing order
		def Aggregate(data, step)
		{
			def events = List();
			when (data.Length > 0)
			{
				mutable prev = data[0];
				for (mutable i = 1; i != data.Length; ++i)
				{
					when (data[i] - prev > step)
						events.Add(i);
					prev = data[i];
				}
				events.Add(data.Length);
			}
			events.ToArray();
		}
		def AverageGroup(data, separators)
		{
			def means = array(separators.Length);
			mutable i = 0;
			foreach (separator in separators with j)
			{
				mutable acc, n;
				while (i != separator)
					(acc, n, i) = (acc + data[i], n + 1, i + 1);
				means[j] = acc / n;
			}
			means;
		}
		def DrawDistribution(bmp, times, window)
		{
			def hFactor = 1.0 / (window * window);
			def n       = times.Length;

			def GetRange(x, support)
			{
				mutable min = 0;
				while (times[min] < x - support)
					++min;
				mutable max = min;
				while (max < n && times[max] <= x + support)
					++max;
				(min, max);
			}

			def minTime = times[0];
			def maxTime = times[times.Length - 1];

			def cols = array(w);
			mutable max = 0.0;
			for (mutable i = 0; i != w; ++i)
			{
				def xi = minTime + (maxTime - minTime) * (i :> double) / w;
				match (msKernel)
				{
				| MeanShiftKernel.Epanechnikov =>
					def (minJ, maxJ) = GetRange(xi, window);
					for (mutable j = minJ; j != maxJ; ++j)
					{
						def xj = times[j];
						def w = 1.0 - hFactor * (xi - xj) * (xi - xj);
						when (w > 0.0)
							cols[i] += w;
					}
				| MeanShiftKernel.Gaussian =>
					def (minJ, maxJ) = GetRange(xi, window * 4.0);
					for (mutable j = minJ; j != maxJ; ++j)
					{
						def xj = times[j];
						def w = Exp(-0.5 * hFactor * (xi - xj) * (xi - xj));
						cols[i] += w;
					}
				}
				when (cols[i] > max)
					max = cols[i];

			}
			when (max > 0.0)
			{
				def foreColor = Color.FromArgb(255, 51, 0);
				for (mutable pixelX = 0; pixelX != w; ++pixelX)
				{
					def value = (y - 1) * cols[pixelX] / max;
					def h = y - Floor(value) :> int;
					for (mutable pixelY = h; pixelY != y; ++pixelY)
						bmp.SetPixel(pixelX, pixelY, foreColor);
					// antialiasing
					def δ = value - Floor(value);
					when (δ > 0.0)
					{
						def backColor = bmp.GetPixel(pixelX, h - 1);
						def color = Color.FromArgb
							( red   = (δ * foreColor.R + (1.0 - δ) * backColor.R) :> int
							, green = (δ * foreColor.G + (1.0 - δ) * backColor.G) :> int
							, blue  = (δ * foreColor.B + (1.0 - δ) * backColor.B) :> int
							);
						bmp.SetPixel(pixelX, h - 1, color);
					}
				}
			}
		}
		def DrawEvents(gfx, events, y, (min, max))
		{
			def r = 2.5f;

			gfx.DrawLine(Color.FromArgb(37, 37, 37) |> Pen, 0, y, w, y);

			def brush = Color.FromArgb(51, 51, 51) |> SolidBrush;

			foreach (e in events)
			{
				def s = (((e[0]            - min) / (max - min) * w) :> float);
				def f = (((e[e.Length - 1] - min) / (max - min) * w) :> float);
				gfx.FillRectangle(brush, s, y - r, f - s, r + r);
			}
		}
		def DrawGrid(gfx, times, (min, max), color)
		{
			using (pen = Pen(color))
			{
				foreach (t in times)
				{
					def x = ((t - min) / (max - min) * w) :> float;
					gfx.DrawLine(pen, x, 0, x, h);
				}
			}
		}
		def DrawTicks(gfx, data, y, groups, empties, (min, max))
		{
			def (r1, r2) = (2.5f, 5.5f);

			gfx.DrawLine(Pen(Color.FromArgb(37, 37, 37)), 0, y, w, y);

			def colors  = array[(51,  51, 51), (153, 1,  0)].Map(Color.FromArgb);
			def pens    = colors.Map(Pen);
			def brushes = colors.Map(SolidBrush);

			mutable groupIndex = 0;
			foreach (x in data with i)
			{
				when (i == groups[groupIndex])
					++groupIndex;
				def x  = (((x - min) / (max - min) * w) :> float);
				gfx.FillEllipse(brushes[groupIndex % 2], x - r1, y - r1, r1 + r1, r1 + r1);
				when (empties.Contains(i))
					gfx.DrawEllipse(pens[groupIndex % 2], x - r2, y - r2, r2 + r2, r2 + r2);
			}
		}
		def DrawThumbs(gfx, data, events, (min, max))
		{
			def GetThumbIndices(begin, end)
			{
				def selection = List();
				if (end - begin > thumbLimit)
				{
					def lo = thumbLimit / 2;
					def hi = thumbLimit - lo;
					for (mutable i = 0; i != lo; ++i)
						selection.Add(begin + i);
					for (mutable i = 0; i != hi; ++i)
						selection.Add(end - hi + i);
				}
				else
				{
					for (mutable i = begin; i != end; ++i)
						selection.Add(i);
				}
				selection;
			}

			foreach (e in events)
			{
				def begin = Array.IndexOf(data, e[0]);
				def end   = Array.IndexOf(data, e[e.Length - 1]);
				def s = ((e[0]            - min) / (max - min) * w);
				def f = ((e[e.Length - 1] - min) / (max - min) * w);
				def m = (s + 0.5 * (f - s)) :> float;
				foreach (i in GetThumbIndices(begin, end) with n)
				{
					using (bmp = Bitmap(thumbs.MakePath(json.Photos[i].ID)))
					{
						def x = m - 0.5f * bmp.Width;
						def y = h + n * (thumbHeight + 1);
						gfx.DrawImage(bmp, x, y);
					}
				}
			}
		}
		def FilterData(data, noise)
		{
			def result = List();
			foreach (x when !noise.Contains(i) in data with i)
				result.Add(x);
			result.ToArray();
		}
		def FindEvents(data, spacing)
		{
			def events = List();
			def e = List();
			for (mutable i = 0; i < data.Length; ++i)
			{
				e.Add(data[i]);
				when (i + 1 == data.Length || data[i+1] - data[i] > spacing)
				{
					events.Add(e.ToArray());
					e.Clear();
				}
			}
			events.ToArray();
		}
		def FindNoise(separators)
		{
			mutable noiseData   = Set();
			mutable noiseGroups = Set();
			mutable prev = 0;
			foreach (separator in separators with i)
			{
				when (separator - prev < dayQuota)
				{
					noiseData   = noiseData.AddList($[prev .. separator - 1]);
					noiseGroups = noiseGroups.Add(i);
				}
				prev = separator;
			}
			(noiseData, noiseGroups);
		}
		def MeanShift(data, window)
		{
			def hFactor = 1.0 / (window * window);
			def n       = data.Length;

			def GetRange(i, support)
			{
				def (lo, hi) = (data[i] - support, data[i] + support);
				mutable min = i - 1;
				while (min >= 0 && data[min] >= lo)
					--min;
				++min;
				mutable max = i + 1;
				while (max < n && data[max] <= hi)
					++max;
				(min, max);
			}

			def modes = array(n);
			data.CopyTo(modes, 0);

			repeat (msIterationCount)
			{
				for (mutable i = 0; i != n; ++i)
				{
					mutable xi    = modes[i];
					mutable mode  = 0.0;
					mutable total = 0.0;
					match (msKernel)
					{
					| MeanShiftKernel.Epanechnikov =>
						def (minJ, maxJ) = GetRange(i, window);
						for (mutable j = minJ; j != maxJ; ++j)
						{
							def xj = data[j];
							def w = 1.0 - hFactor * (xi - xj) * (xi - xj);
							when (w > 0.0)
							{
								total += w;
								mode += xj * w;
							}
						}
					| MeanShiftKernel.Gaussian =>
						def (minJ, maxJ) = GetRange(i, window * 5.0);
						for (mutable j = minJ; j != maxJ; ++j)
						{
							def xj = data[j];
							def w = Exp(-0.5 * hFactor * (xi - xj) * (xi - xj));
							total += w;
							mode += xj * w;
						}
					}
					modes[i] = mode / total;
				}
			}
			modes;
		}

		def ticksPerDay        = 24 * 60 * 60 * 10_000_000;
		def coarseEventSpacing = coarseEventSpacing * ticksPerDay;
		def fineEventSpacing   = fineEventSpacing * ticksPerDay;
		def window             = kdeWindow * ticksPerDay;
		def groupSpacing       = 0.1 * window;


		def dates = json.Photos.MapToArray(_.DateTaken);
		Array.Sort(dates);

		def times = dates.Map(date => date.Ticks :> double);
		def range = (times[0], times[times.Length - 1]);

		def modes = MeanShift(times, window);

		def dayGroups     = Aggregate(modes, groupSpacing);
		def dayTimes      = AverageGroup(modes, dayGroups);
		def dayTimeGroups = $[1..dayTimes.Length].ToArray();

		def (noiseTimes, noiseDays) = FindNoise(dayGroups);

		def coarseGroups = FindEvents(FilterData(times, noiseTimes), coarseEventSpacing);

		def fineGroups = coarseGroups.Map(FindEvents(_, fineEventSpacing)).Flatten().NToArray();

		def refEvents = refEvents.Dates.Map(date => date.Ticks :> double);

		graph.Image = Bitmap(w, h + (thumbHeight + 1) * thumbLimit);
		using (gfx = Graphics.FromImage(graph.Image))
		{
			gfx.SmoothingMode = SmoothingMode.HighQuality;

			gfx.Clear(Color.White);

			DrawGrid(gfx, refEvents, range, Color.FromArgb(194, 194, 194));

			DrawDistribution(graph.Image, times, window);

			DrawTicks(gfx, times,    dataY,        dayGroups,     Set(),     range);
			DrawTicks(gfx, dayTimes, dayEventY,    dayTimeGroups, noiseDays, range);

			DrawEvents(gfx, coarseGroups, coarseEventY, range);
			DrawEvents(gfx, fineGroups,   fineEventY,   range);

			DrawThumbs(gfx, times, fineGroups, range);
		}
	}
}
