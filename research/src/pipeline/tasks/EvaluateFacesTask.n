using Nemerle.Collections;
using PipelineMacro;
using System.Collections.Generic;
using System;

public class EvaluateFacesTask: ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach ((name, auto, refs, json) in items.Join.[FacesItem, FacesRefItem, JsonItem]())
		{
			mappings ::= TaskMapping
				( this
				, [ auto, refs, json ]
				, [ FacesEvaluationItem(name) ]
				);
		}
		mappings;
	}

	private Compute
		( [InItem]  auto   : FacesItem
		, [InItem]  refs   : FacesRefItem
		, [InItem]  json   : JsonItem
		, [OutItem] result : FacesEvaluationItem
		) : void
	{
		def GetPhotosHash()
		{
			json.Photos.Fold(0, (photo, hash) => photo.ID.GetHashCode() ^ hash)
		}
		when (refs.Hash != GetPhotosHash())
			throw InconsistentItemsException("Reference generated from different images.");

		def photos = json.Photos.Sort(_.DateTaken);

		def refs = Set(refs.Indices.Map(i => photos[i].ID));
		def auto = Set(auto.ImageFaces.Keys);

		result.FalsePositives = Set(auto.Subtract(refs));
		result.FalseNegatives = Set(refs.Subtract(auto));

		def fp = result.FalsePositives.Count;
		def fn = result.FalseNegatives.Count;
		result.Score = 1.0 - (fp + fn) / (photos.Length :> double);
	}
}
