using Nemerle.Collections;
using PipelineMacro;
using System.Collections.Generic;
using System.Drawing.Drawing2D;
using System.Drawing;
using System.Math;
using System;

class GraphTimeTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		def eventItems = Hashtable();
		foreach(item is EventItem in items)
			eventItems[item.Name] = item;

		mutable mappings = [];
		foreach (item is JsonItem when eventItems.Contains(item.Name) in items)
		{
			mappings ::= TaskMapping
				( this
				, [ item, eventItems[item.Name] ]
				, [ TimeGraphItem(item.Name) ]
				);
		}
		mappings;
	}

	private Compute
		( [InItem]  json   : JsonItem
		, [InItem]  events : EventItem
		, [OutItem] graph  : TimeGraphItem
		, kdeWindow        : double
		, msIterationCount : int
		, msKernel         : MeanShiftKernel
		) : void
	{
		def (w, h, y) = (512, 112, 64);

		// returns the list of indices at which new groups begin
		// assumes the data is sorted in increasing order
		def Aggregate(data, step)
		{
			def events = List();
			when (data.Length > 0)
			{
				mutable prev = data[0];
				for (mutable i = 1; i != data.Length; ++i)
				{
					when (data[i] - prev > step)
						events.Add(i);
					prev = data[i];
				}
			}
			events.ToArray();
		}
		def DrawDistribution(bmp, times, window)
		{
			def minTime = times[0];
			def maxTime = times[times.Length - 1];

			def hFactor = 1.0 / (window * window);
			def cols = array(w);
			mutable max = 0.0;
			for (mutable i = 0; i != w; ++i)
			{
				def x = minTime + (maxTime - minTime) * (i :> double) / w;
				match (msKernel)
				{
				| MeanShiftKernel.Epanechnikov =>
					foreach (t in times)
					{
						def w = hFactor * (x - t) * (x - t);
						when (w <= 1.0)
							cols[i] += 1.0 - w;
					}
				| MeanShiftKernel.Gaussian =>
					foreach (t in times)
					{
						def w = Exp(-0.5 * hFactor * (x - t) * (x - t));
						cols[i] += w;
					}
				}
				when (cols[i] > max)
					max = cols[i];

			}
			when (max > 0.0)
			{
				def foreColor = Color.FromArgb(255, 51, 0);
				for (mutable pixelX = 0; pixelX != w; ++pixelX)
				{
					def value = (y - 1) * cols[pixelX] / max;
					def h = y - Floor(value) :> int;
					for (mutable pixelY = h; pixelY != y; ++pixelY)
						bmp.SetPixel(pixelX, pixelY, foreColor);
					// antialiasing
					def δ = value - Floor(value);
					when (δ > 0.0)
					{
						def backColor = bmp.GetPixel(pixelX, h - 1);
						def color = Color.FromArgb
							( red   = (δ * foreColor.R + (1.0 - δ) * backColor.R) :> int
							, green = (δ * foreColor.G + (1.0 - δ) * backColor.G) :> int
							, blue  = (δ * foreColor.B + (1.0 - δ) * backColor.B) :> int
							);
						bmp.SetPixel(pixelX, h - 1, color);
					}
				}
			}
		}
		def DrawTicks(gfx, times, y, groups, (min, max))
		{
			def r = 2.5f;

			gfx.DrawLine(Pen(Color.FromArgb(37, 37, 37)), 0, y, w, y);

			mutable brush1 = SolidBrush(Color.FromArgb(51,  51, 51));
			mutable brush2 = SolidBrush(Color.FromArgb(153, 1,  0));
			mutable groupIndex = 0;
			foreach (t in times with i)
			{
				when (groupIndex < groups.Length && i == groups[groupIndex])
				{
					brush1 <-> brush2;
					++groupIndex;
				}
				gfx.FillEllipse
					( brush  = brush1
					, x      = (((t - min) / (max - min) * w) :> float) - r
					, y      = y - r
					, width  = r * 2.0f
					, height = r * 2.0f
					);
			}
		}
		def DrawGrid(gfx, min, max)
		{
			def scale = w / ((max.Ticks - min.Ticks) :> double);

			def totalDays = (max - min).TotalDays :> int;
			when (10 * totalDays <= w)
			{
				def pen = Pen(Color.FromArgb(194, 194, 194));
				for (mutable i = 0; i <= totalDays + 1; ++i)
				{
					def t = DateTime(min.Year, min.Month, min.Day).AddDays(i);
					def span = t.Ticks - min.Ticks :> double;
					def x = Round(scale * span) :> int;
					gfx.DrawLine(pen, x, 0, x, h);
				}
			}
			def totalMonths = ((max - min).TotalDays / 30.0) :> int;
			when (10 * totalMonths <= w)
			{
				def pen = Pen(Color.FromArgb(137, 137, 137));
				for (mutable i = 0; i <= totalMonths + 1; ++i)
				{
					def t = DateTime(min.Year, min.Month, 1).AddMonths(i);
					def span = t.Ticks - min.Ticks :> double;
					def x = Round(scale * span) :> int;
					gfx.DrawLine(pen, x, 0, x, h);
				}
			}
			def totalYears = ((max - min).TotalDays / 365.0) :> int;
			when (10 * totalYears <= w)
			{
				def pen = Pen(Color.FromArgb(70, 70, 70));
				for (mutable i = 0; i <= totalYears + 1; ++i)
				{
					def t = DateTime(min.Year, 1, 1).AddYears(i);
					def span = t.Ticks - min.Ticks :> double;
					def x = Round(scale * span) :> int;
					gfx.DrawLine(pen, x, 0, x, h);
				}
			}
		}
		def MeanShift(data, window)
		{
			def hFactor = 1.0 / (window * window);
			def n       = data.Length;

			def modes = array(n);
			data.CopyTo(modes, 0);

			repeat (msIterationCount)
			{
				for (mutable i = 0; i != n; ++i)
				{
					mutable xi    = modes[i];
					mutable mode  = 0.0;
					mutable total = 0.0;
					match (msKernel)
					{
					| MeanShiftKernel.Epanechnikov =>
						for (mutable j = 0; j != n; ++j)
						{
							def xj = data[j];
							def w = 1.0 - hFactor * (xi - xj) * (xi - xj);
							when (w > 0.0)
							{
								total += w;
								mode += xj * w;
							}
						}
					| MeanShiftKernel.Gaussian =>
						for (mutable j = 0; j != n; ++j)
						{
							def xj = data[j];
							def w = Exp(-0.5 * hFactor * (xi - xj) * (xi - xj));
							total += w;
							mode += xj * w;
						}
					}
					modes[i] = mode / total;
				}
			}
			modes;
		}

		def hoursPerDay      = 24;
		def minutesPerHours  = 60;
		def secondsPerMinute = 60;
		def ticksPerSecond   = 10_000_000;
		def window       = kdeWindow * hoursPerDay * minutesPerHours * secondsPerMinute * ticksPerSecond;
		def groupSpacing = 0.05 * window;


		def dates = json.Photos.MapToArray(_.DateTaken);
		Array.Sort(dates);
		def (minDate, maxDate) = (dates[0], dates[dates.Length - 1]);

		def times = dates.Map(date => date.Ticks :> double);
		def range = (times[0], times[times.Length - 1]);

		def modes = MeanShift(times, window);

		def groups = Aggregate(modes, groupSpacing);

		def events = events.Dates.Map(date => date.Ticks :> double);

		graph.Image = Bitmap(w, h);
		using (gfx = Graphics.FromImage(graph.Image))
		{
			gfx.SmoothingMode = SmoothingMode.HighQuality;

			gfx.Clear(Color.White);

			DrawGrid(gfx, minDate, maxDate);

			DrawDistribution(graph.Image, times, window);

			DrawTicks(gfx, times,  y,      groups,   range);
			DrawTicks(gfx, modes,  y + 16, groups,   range);
			DrawTicks(gfx, events, y + 32, array(0), range);
		}
	}
}
