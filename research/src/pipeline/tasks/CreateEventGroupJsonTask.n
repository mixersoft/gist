using Nemerle.Collections;
using PipelineMacro;
using System.Collections.Generic;
using System.IO;

public class CreateEventGroupJsonTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach ((name, groups, json) in items.Join.[EventGroupItem, JsonItem]())
		{
			mappings ::= TaskMapping
				( this
				, [ groups, json ]
				, [ EventGroupJsonItem(name) ]
				);
		}
		mappings;
	}

	private Compute
		( [InItem]  groups : EventGroupItem
		, [InItem]  json   : JsonItem
		, [OutItem] events : EventGroupJsonItem
		) : void
	{
		def MakeEventInfo(s, f, count, children)
		{
			JsonIO.EventInfo
				( firstPhotoID = s.ID
				, photoCount   = count
				, beginDate    = s.DateTaken
				, endDate      = f.DateTaken
				, children     = children
				);
		}
		def MakeCoarseGroupEventInfo(fineGroups : array[array[int]])
		{
			def First ['T] (arr : array['T]) { arr[0] }
			def Last  ['T] (arr : array['T]) { arr[arr.Length - 1] }
			def MakeFine(group : array[int])
			{
				MakeEventInfo
					( json.Photos[First(group)]
					, json.Photos[Last(group)]
					, group.Length
					, array(0)
					)
			}
			MakeEventInfo
				( json.Photos[First(First(fineGroups))]
				, json.Photos[Last(Last(fineGroups))]
				, fineGroups.Map(_.Length).Fold(0, _ + _ )
				, fineGroups.Map(MakeFine)
				)
		}
		def MakeNoiseEventInfo(separators : array[int], noise : Set[int])
		{
			def events = List();
			mutable begin = 0;
			foreach (end in separators with i)
			{
				when (noise.Contains(i))
				{
					events.Add
						( MakeEventInfo
							( json.Photos[begin]
							, json.Photos[end-1]
							, end - begin
							, array(0)
							)
						)
				}
				begin = end;
			}
			events.ToArray();
		}
		events.Events = groups.Groups.Map(MakeCoarseGroupEventInfo);
		events.Noise  = MakeNoiseEventInfo(groups.DayGroups, groups.NoiseDays);
		events.ID     = json.ID;
	}
}
