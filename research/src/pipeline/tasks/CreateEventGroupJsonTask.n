using Nemerle.Collections;
using PipelineMacro;
using System.Array;
using System.Collections.Generic;
using System.IO;

public class CreateEventGroupJsonTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach ((name, groups, json) in items.Join.[EventGroupItem, JsonItem]())
		{
			mappings ::= TaskMapping
				( this
				, [ groups, json ]
				, [ EventGroupJsonItem(name) ]
				);
		}
		mappings;
	}

	private Compute
		( [InItem]  groups : EventGroupItem
		, [InItem]  json   : JsonItem
		, [OutItem] events : EventGroupJsonItem
		) : void
	{
		def MakeGroupEventInfo(first, last)
		{
			
			def firstIndex = FindIndex     (json.Photos, p => p.DateTaken >= first);
			def lastIndex  = FindLastIndex (json.Photos, p => p.DateTaken <= last);
			JsonIO.EventInfo
				( firstPhotoID = json.Photos[firstIndex].ID
				, photoCount   = lastIndex - firstIndex + 1
				, beginDate    = first
				, endDate      = last
				);
		}
		events.Events = groups.Groups.Map(MakeGroupEventInfo);
		events.ID     = json.ID;
	}
}
