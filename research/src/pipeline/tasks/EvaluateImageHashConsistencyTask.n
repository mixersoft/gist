using Nemerle.Collections;
using PipelineMacro;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Math;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Media;
using System;

class EvaluateImageHashConsistencyTask : ITask
{
	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		def images = items
			.TypedFind(item : ImageCollectionItem => item.Path == "image-sample")
			.Value;
		def evaluation = ImageHashConsistencyEvaluationItem(@"eval\hash consistency.txt");
		[ TaskMapping(this, [ images ], [ evaluation ]) ]
	}

	private Compute
		( [InItem]  images     : ImageCollectionItem
		, [OutItem] evaluation : ImageHashConsistencyEvaluationItem
		, hashMethod      : ImageHash.HashMethod
		, hashedImageSize : int
		, hashedImageBpp  : int
		) : void
	{
		def SubsampleHQ(src, dst, w, h)
		{
			ImageMagick.Convert(src, dst, $"-filter Lanczos -resize $(w)x$(h)> -quality 80");
		}
		def SubsampleLQ(src, dst, w, h)
		{
			ImageMagick.Convert(src, dst, $"-filter Lanczos -resize $(w)x$(h)> -quality 40");
		}
		def GetHashCode(path) : int
		{
			using (bmp = Bitmap(path))
				ImageHash.GetHashCode(bmp, hashMethod, hashedImageSize, hashedImageBpp);
		}
		foreach (id in images.ImageIDs)
		{
			def sizes =
				[ (120, 80),  (144, 96),  (222, 148)
				, (240, 161), (320, 214), (640, 428)
				];
			mutable hashes = [];
			def path = images.MakePath(id);
			foreach ((w, h) in sizes)
			{
				using (tmp = TempFile())
				{
					SubsampleHQ(path, tmp.Path, w, h);
					hashes ::= GetHashCode(tmp.Path);
					SubsampleLQ(path, tmp.Path, w, h);
					hashes ::= GetHashCode(tmp.Path);
				}
			}
			evaluation.Hashes ::= (id, hashes);
		}
	}
}
