using Nemerle.Collections;
using PipelineMacro;
using System.IO;
using System;

[ TaskItemInfo(File(".txt")) ]
public class EventGroupItem : ITaskItem
{
	public mutable Groups    : array[array[array[int]]];
	public mutable DayGroups : array[int];
	public mutable DayTimes  : array[double];
	public mutable NoiseDays : Set[int];

	public Save(path : string) : void
	{
		def Join['T](a : array['T]) { string.Join(" ", a) }

		using (writer = File.CreateText(path))
		{
			writer.WriteLine(Groups.Length);
			foreach (coarse in Groups)
			{
				writer.WriteLine(coarse.Length);
				foreach (fine in coarse)
					writer.WriteLine(Join(fine));
			}

			writer.WriteLine(Join(DayGroups));
			writer.WriteLine(Join(DayTimes));
			writer.WriteLine(Join(NoiseDays.ToArray()));
		}
	}

	public Load(path : string) : void
	{
		def RemoveEmpties = StringSplitOptions.RemoveEmptyEntries;
		def SplitDbl(str)
		{
			str.Split(array[' '], RemoveEmpties).Map(double.Parse)
		}
		def SplitInt(str)
		{
			str.Split(array[' '], RemoveEmpties).Map(int.Parse)
		}
		using (reader = File.OpenText(path))
		{
			Groups = array(int.Parse(reader.ReadLine()));
			for (mutable i = 0; i != Groups.Length; ++i)
			{
				Groups[i] = array(int.Parse(reader.ReadLine()));
				for (mutable j = 0; j != Groups[i].Length; ++j)
					Groups[i][j] = SplitInt(reader.ReadLine());
			}

			DayGroups = SplitInt(reader.ReadLine());
			DayTimes  = SplitDbl(reader.ReadLine());
			NoiseDays = Set(SplitInt(reader.ReadLine()));
		}
	}
}
