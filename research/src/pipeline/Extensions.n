using System.Collections.Generic;
using Nemerle.Imperative;
using System;

public module Extensions
{
	private colors = array
		[ (0xAB, 0x5F, 0x81) , (0x68, 0x55, 0x40) , (0xB7, 0xAF, 0xA4) , (0xFD, 0xE2, 0x96)
		, (0x7F, 0x1C, 0x5D) , (0xBE, 0x93, 0xDD) , (0xF6, 0xA1, 0x5F) , (0x60, 0xA0, 0x7E)
		, (0xFD, 0x1D, 0xC4) , (0x7A, 0x62, 0x8E) , (0x9B, 0xED, 0xF8) , (0x6A, 0xD0, 0xC0)
		, (0x86, 0x96, 0xFB) , (0x54, 0x4C, 0x5C) , (0xF7, 0x42, 0xF3) , (0xE6, 0xDE, 0x41)
		, (0x91, 0xB7, 0xFE) , (0x1C, 0x21, 0x6F) , (0xA0, 0x4B, 0x4F) , (0xA3, 0x7F, 0x44)
		, (0x59, 0x27, 0x26) , (0x91, 0x8E, 0xAA) , (0xFB, 0x3E, 0x61) , (0x43, 0x76, 0x25)
		, (0xDB, 0x79, 0xB5) , (0xD2, 0xE4, 0xB9) , (0x67, 0x06, 0x83) , (0x7D, 0x07, 0x38)
		, (0xC1, 0x90, 0x72) , (0xEF, 0x7F, 0xFA) , (0xE5, 0x70, 0x52) , (0xF9, 0xC6, 0xF0)
		];
	public RandomRGB(n : int) : int * int * int
	{
		colors[n % colors.Length];
	}

	public RandomShuffle['T](this a : array['T], random : Random) : void
	{
		// Fisher-Yates shuffle
		for (mutable i = a.Length - 1; i > 0; --i)
			a[i] <-> a[random.Next(i+1)];
	}

	public TypedFilter[T1, T2]
		( this l : IEnumerable[T1]
		, pred : T2 -> bool
		) : IEnumerable[T2] where T2 : T1
	{
		foreach (x is T2 when pred(x) in l)
			yield x;
	}

	public TypedFind[T1, T2]
		( this l : IEnumerable[T1]
		, pred : T2 -> bool
		) : option[T2] where T2 : T1
	{
		foreach (x is T2 when pred(x) in l)
			return Some(x);
		None();
	}

	public Join[T1, T2]
		( this items : IEnumerable[ITaskItem]
		) : IEnumerable[string * T1 * T2]
		where T1 : ITaskItem
		where T2 : ITaskItem
	{
		def t1s = Dictionary.[string, T1]();
		foreach (t1 is T1 in items)
			t1s[t1.Name] = t1;

		mutable tuples = [];
		foreach (t2 is T2 in items)
		{
			def name = t2.Name;
			when (t1s.ContainsKey(name))
				tuples ::= ( name, t1s[name], t2 );
		}
		tuples;
	}

	public Join[T1, T2, T3]
		( this items : IEnumerable[ITaskItem]
		) : IEnumerable[string * T1 * T2 * T3]
		where T1 : ITaskItem
		where T2 : ITaskItem
		where T3 : ITaskItem
	{
		def t1s = Dictionary.[string, T1]();
		foreach (t1 is T1 in items)
			t1s[t1.Name] = t1;

		def t2s = Dictionary.[string, T2]();
		foreach (t2 is T2 in items)
			t2s[t2.Name] = t2;

		mutable tuples = [];
		foreach (t3 is T3 in items)
		{
			def name = t3.Name;
			when (t1s.ContainsKey(name) && t2s.ContainsKey(name))
				tuples ::= ( name, t1s[name], t2s[name], t3 );
		}
		tuples;
	}

	public Join[T1, T2, T3, T4]
		( this items : IEnumerable[ITaskItem]
		) : IEnumerable[string * T1 * T2 * T3 * T4]
		where T1 : ITaskItem
		where T2 : ITaskItem
		where T3 : ITaskItem
		where T4 : ITaskItem
	{
		def t1s = Dictionary.[string, T1]();
		foreach (t1 is T1 in items)
			t1s[t1.Name] = t1;

		def t2s = Dictionary.[string, T2]();
		foreach (t2 is T2 in items)
			t2s[t2.Name] = t2;

		def t3s = Dictionary.[string, T3]();
		foreach (t3 is T3 in items)
			t3s[t3.Name] = t3;

		mutable tuples = [];
		foreach (t4 is T4 in items)
		{
			def name = t4.Name;
			when (t1s.ContainsKey(name) && t2s.ContainsKey(name) && t3s.ContainsKey(name))
				tuples ::= ( name, t1s[name], t2s[name], t3s[name], t4 );
		}
		tuples;
	}
}
