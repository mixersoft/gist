using Nemerle.Collections;
using System;

using SCG = System.Collections.Generic;

public class TaskManager
{
	private persistData     : bool;
	private displayProgress : bool;

	private items        : Hashtable[string, ITaskItem];
	private taskMappings : list[list[TaskMapping]];

	private mutable toCompute : Set[string];
	private mutable loaded    : Set[string];

	public this
		( tasks           : list[ITask]
		, persistData     : bool
		, displayProgress : bool
		)
	{
		this.persistData     = persistData;
		this.displayProgress = displayProgress;

		mutable taskMappings = [];
		mutable items        = [];
		foreach (task in tasks)
		{
			def mappings = task.MapItems(items);
			foreach (mapping in mappings)
				items = mapping.Outputs.Append(items);
			taskMappings ::= mappings;
		}

		this.taskMappings = taskMappings.Reverse();

		this.items = Hashtable();
		foreach (item in items)
			this.items.Add(item.Path, item);

		this.toCompute = Set();
		foreach (item in items)
		{
			unless (item.HasCache())
				this.toCompute = this.toCompute.Add(item.Path);
		}

		this.loaded = Set();
	}

	public Items : SCG.IEnumerable[ITaskItem]
	{
		get { items.Values }
	}

	public DiscardItemData(name : string) : void
	{
		when (!items.Contains(name))
			throw ArgumentException("name");
		toCompute = toCompute.Replace(name);
	}

	public Compute(parameters : Parameters) : void
	{
		def stopwatch = Diagnostics.Stopwatch();
		def ToCompute(item) { toCompute.Contains(item.Path) }
		foreach (layer in taskMappings)
		{
			foreach (mapping in layer)
			{
				def i = mapping.Inputs;
				def o = mapping.Outputs;
				when (i.Exists(ToCompute) || o.Exists(ToCompute))
				{
					foreach (item in i)
					{
						when (!ToCompute(item) && !loaded.Contains(item.Path) && item.HasCache())
						{
							when (displayProgress)
								Console.WriteLine($"Load $(item.Path)");
							loaded = loaded.Add(item.Path);
							item.Load();
						}
					}
					when (displayProgress)
					{
						Console.WriteLine($"..$(i.Map(_.Path)) -> ..$(o.Map(_.Path))");
						stopwatch.Start();
					}
					mapping.Task.Compute(mapping.Inputs, mapping.Outputs, parameters);
					when (displayProgress)
					{
						Console.WriteLine(stopwatch.Elapsed);
						stopwatch.Reset();
					}
					when (persistData)
					{
						foreach (item in o)
						{
							when (displayProgress)
								Console.WriteLine($"Save $(item.Path)");
							item.Save();
						}
					}
					toCompute = toCompute.ReplaceList(o.Map(_.Path));
				}
			}
		}
		toCompute = toCompute.Clear();
	}
}
