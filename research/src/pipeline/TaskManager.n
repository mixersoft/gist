using Nemerle.Collections;
using System.Console;
using System.IO;
using System;

using SCG = System.Collections.Generic;

public class TaskManager
{
	private persistData     : bool;
	private displayProgress : bool;

	private items        : Hashtable[string, ITaskItem];
	private taskMappings : list[list[TaskMapping]];

	private mutable toCompute : Set[string];
	private mutable loaded    : Set[string];

	public this
		( tasks           : list[ITask]
		, persistData     : bool
		, displayProgress : bool
		)
	{
		this(tasks, persistData, displayProgress, Set());
	}

	public this
		( tasks           : list[ITask]
		, persistData     : bool
		, displayProgress : bool
		, whitelist       : Set[string]
		)
	{
		// save settings

		this.persistData     = persistData;
		this.displayProgress = displayProgress;

		// display whitelist warning, if needed

		when (!whitelist.IsEmpty && displayProgress)
		{
			WriteLine("Using a whitelist. Only the following datasets will be computed.");
			whitelist.Iter(WriteLine("  - {0}", _));
			WriteLine();
		}
		def IsWhitelisted(item) { whitelist.IsEmpty || whitelist.Contains(item.Name) }

		// create the item graph

		mutable taskMappings = [];
		mutable items        = [];
		foreach (task in tasks)
		{
			def mappings = task.MapItems(items);
			foreach (mapping in mappings)
				items = mapping.Outputs.Filter(IsWhitelisted).Append(items);
			taskMappings ::= mappings;

			when (mappings.IsEmpty)
				WriteLine("Warning: {0} does not produce any items.", task.GetType().Name);
		}

		this.taskMappings = taskMappings.Reverse();

		this.items = Hashtable();
		foreach (item in items)
			this.items.Add(item.Path, item);

		// gather items to compute

		this.toCompute = Set();
		foreach (item when !item.HasCache() in items)
			this.toCompute = this.toCompute.Add(item.Path);

		this.loaded = Set();
	}

	public Items : SCG.IEnumerable[ITaskItem]
	{
		get { items.Values }
	}

	public DiscardItemData(path : string) : void
	{
		when (!items.Contains(path))
			throw ArgumentException("path");
		toCompute = toCompute.Replace(path);
	}

	public Compute(parameters : Parameters) : void
	{
		def SetToCompute(items) { toCompute = toCompute.ReplaceList(items.Map(_.Path)) }
		def ToCompute(item)     { toCompute.Contains(item.Path) }

		mutable failed = Set();
		def MarkFailed(items) { failed = failed.ReplaceList(items.Map(_.Path)) }
		def HasFailed(item)   { failed.Contains(item.Path) }

		def stopwatch = Diagnostics.Stopwatch();

		foreach (layer in taskMappings)
		{
			foreach (mapping in layer)
			{
				def i = mapping.Inputs;
				def o = mapping.Outputs;
				if (i.Exists(HasFailed))
				{
					MarkFailed(o);
				}
				else
				{
					when (i.Exists(ToCompute) || o.Exists(ToCompute))
					{
						foreach (item in i)
						{
							when (!ToCompute(item) && !loaded.Contains(item.Path) && item.HasCache())
							{
								when (displayProgress)
									WriteLine("Load {0}", item.Path);
								loaded = loaded.Add(item.Path);
								item.Load(item.Path);
							}
						}
						try
						{
							when (displayProgress)
							{
								WriteLine($"..$(i.Map(_.Path)) -> ..$(o.Map(_.Path))");
								stopwatch.Start();
							}
							mapping.Task.Compute(i, o, parameters);
							when (displayProgress)
							{
								stopwatch.Stop();
								WriteLine(stopwatch.Elapsed);
							}

							when (persistData)
							{
								foreach (item in o)
								{
									when (displayProgress)
										WriteLine("Save {0}", item.Path);
									def dir = Path.GetDirectoryName(item.Path);
									when (dir != "")
										_ = Directory.CreateDirectory(dir);
									item.Save(item.Path);
								}
							}

							SetToCompute(o);
						}
						catch
						{
						| e is InconsistentItemsException =>
							WriteLine("Error: {0}", e.Message);
							MarkFailed(o);
						| e =>
							WriteLine(e);
							MarkFailed(o);
						}
					}
				}
			}
		}
		toCompute = toCompute.Clear();

		when (failed.Count > 0)
		{
			WriteLine();
			WriteLine("The following items could not be computed:");
			foreach (path in failed)
				WriteLine("  - {0}", path);
		}
	}
}
