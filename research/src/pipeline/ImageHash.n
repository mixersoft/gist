using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using System.Collections;
using System.Drawing;
using System.Security.Cryptography;
using System;

public module ImageHash
{
	public variant BlurMethod
	{
	| Median   { size : int }
	| Gaussian { factor : double }
	}

	public enum HashMethod
	{
	| Mean
	| MD5
	}

	public GetHashCode
		( image           : Bitmap
		, hashMethod      : ImageHash.HashMethod
		, hashedImageSize : int
		, hashedImageBpp  : int
		) : int
	{
		match (hashMethod)
		{
		| Mean => GetMeanHashCode(image)
		| MD5  => GetMD5HashCode(image, hashedImageSize, hashedImageBpp);
		}
	}

	private static GetMeanHashCode(image : Bitmap) : int
	{
		def Resize(src : Bitmap) : Image.[Gray, byte]
		{
			def (w, h) = if (src.Width > src.Height) (8, 4) else (4, 8);
			Image.[Gray, byte](src).Resize(w, h, INTER.CV_INTER_AREA);
		}
		def GetHash(src : Image.[Gray, byte])
		{
			def data : array[3, byte] = src.Data;
			def (w, h) = (src.Width, src.Height);

			mutable mean = 0;
			for (mutable y = 0; y != h; ++y)
			for (mutable x = 0; x != w; ++x)
				mean += data[y, x, 0];
			mean /= w * h;

			mutable hash = 0;
			for (mutable y = 0; y != h; ++y)
			for (mutable x = 0; x != w; ++x)
			{
				when (data[y, x, 0] > mean)
					hash |= 1 << (y * w + x);
			}
			hash;
		}
		image |> Resize |> GetHash;
	}

	private static GetMD5HashCode(image : Bitmap, imageSize : int, bpp : int) : int
	{
		def Resize(src : Bitmap) : Image.[Gray, byte]
		{
			Image.[Gray, byte](src).Resize(imageSize, imageSize, INTER.CV_INTER_AREA)
		}
		def ToByteArray(src : Image.[Gray, byte]) : array[byte]
		{
			def data : array[3, byte] = src.Data;

			def (w, h) = (src.Width, src.Height);
			def bits = BitArray(bpp * w * h);
			mutable i = 0;
			for (mutable y = 0; y != h; ++y)
			for (mutable x = 0; x != w; ++x)
			{
				def value = data[y, x, 0] >> (8 - bpp);
				for (mutable bit = 0; bit != bpp; ++bit)
				{
					bits[i] = value & (1 << bit) != 0;
					++i;
				}
			}
			def bytes = array((bits.Count + 7) / 8); // divide rounding up
			bits.CopyTo(bytes, index = 0);
			bytes;
		}
		def Hash(data : array[byte]) : array[byte]
		{
			MD5.Create().ComputeHash(data)
		}
		def GetFirst32Bits(hash : array[byte]) : int
		{
			hash[0] | (hash[1] << 8) | (hash[2] << 16) | (hash[3] << 24)
		}
		image |> Resize |> ToByteArray |> Hash |> GetFirst32Bits;
	}
}
