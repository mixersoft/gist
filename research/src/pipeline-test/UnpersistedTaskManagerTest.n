using NUnit.Framework;
using Nemerle.Collections;
using System.Linq;
using System;

[ TestFixture ]
public class UnpersistedTaskManagerTest
{
	private mutable taskManager : TaskManager;
	private mutable items       : list[MockTaskItem];

	[ SetUp ]
	public Setup() : void
	{
		items =
			[ ("item-1", false)
			, ("item-2", true)
			, ("item-3", false)
			, ("item-4", true)
			, ("item-5", false)
			].Map(MockTaskItem);

		taskManager = TaskManager
			( tasks =
				[ MockTask
					( name    = "task-1"
					, itemMap =
						[ ([], ["item-1"])
						, ([], ["item-2"])
						]
					, items = items
					)
				, MockTask
					( name    = "task-2"
					, itemMap =
						[ (["item-1", "item-2"], ["item-3"])
						, (["item-1", "item-2"], ["item-4"])
						]
					, items = items
					)
				, MockTask
					( name    = "task-3"
					, itemMap =
						[ (["item-1", "item-3"], ["item-5"]) ]
					, items = items
					)
				]
			, persistData     = false
			, displayProgress = false
			);
	}

	[ Test ]
	public TestConstruction() : void
	{
		def items = taskManager.Items.Map(ToMockTaskItem);

		CollectionAssert.AreEquivalent
			( expected = $[1..5].Map(n => $"item-$n")
			, actual   = items.Map(_.Path)
			, message  = "Were all items discovered?"
			);

		Assert.IsFalse
			( condition = items.Exists(item => item.LoadPath != null)
			, message   = "Were any items loaded on startup?"
			);
	}

	[ Test ]
	public TestDiscardItemData() : void
	{
		def Discard = taskManager.DiscardItemData;

		foreach (n in [1 .. 4])
			_ = Assert.DoesNotThrow(() => Discard($"item-$n"));

		_ = Assert.Catch.[ArgumentException](() => Discard(""));
		_ = Assert.Catch.[ArgumentException](() => Discard("item-0"));
	}

	[ Test ]
	public TestCompute() : void
	{
		taskManager.Compute(Parameters());

		def items = taskManager.Items.Map(ToMockTaskItem).Sort((x, y) => x.CompareTo(y));

		CollectionAssert.AreEqual
			( expected = [ 1, 0, 1, 1, 1 ]
			, actual   = items.Map(_.ComputeCount)
			, message  = "Were the appropriate items computed?"
			);

		CollectionAssert.AreEqual
			( expected = [ false, true, false, false, false ]
			, actual   = items.Map(item => item.LoadPath != null)
			, message  = "Were the appropriate items loaded?"
			);

		Assert.IsFalse
			( condition = items.Exists(item => item.SavePath != null)
			, message   = "Has any item been saved?"
			);
	}

	[ Test ]
	public TestRecompute() : void
	{
		def GetComputeCount(name)
		{
			items.Find(item => item.Path == name).Value.ComputeCount
		}
		def ResetItemData()
		{
			items.Iter(_.Reset());
		}

		def parameters = Parameters();

		def values =
			[ ("item-1", [ 1, 0, 1, 1, 1 ])
			, ("item-2", [ 0, 1, 1, 1, 1 ])
			, ("item-3", [ 0, 0, 1, 0, 1 ])
			, ("item-4", [ 0, 0, 0, 1, 0 ])
			, ("item-5", [ 0, 0, 0, 0, 1 ])
			];

		foreach ((discarded, expected) in values)
		{
			taskManager.Compute(parameters);

			ResetItemData();
			taskManager.DiscardItemData(discarded);

			taskManager.Compute(parameters);

			foreach (count in expected with i)
			{
				def name = $"item-$(i+1)";
				def verb = if (count == 0) "skipped" else "computed";
				Assert.AreEqual
					( actual   = GetComputeCount(name)
					, expected = count
					, message  = $"Was '$name' $verb after discarding '$discarded'?"
					);
			}
		}
	}

	private static ToMockTaskItem(item : ITaskItem) : MockTaskItem
	{
		item :> MockTaskItem
	}
}
