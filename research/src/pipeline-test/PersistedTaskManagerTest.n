using NUnit.Framework;
using Nemerle.Collections;
using System.Linq;
using System;

[ TestFixture ]
public class PersistedTaskManagerTest
{
	private mutable taskManager : TaskManager;
	private mutable items       : list[MockTaskItem];

	[ SetUp ]
	public Setup() : void
	{
		items =
			[ ("item-1", false)
			, ("item-2", true)
			, ("item-3", false)
			, ("item-4", true)
			, ("item-5", false)
			].Map(MockTaskItem);

		taskManager = TaskManager
			( tasks =
				[ MockTask
					( name    = "task-1"
					, itemMap =
						[ ([], ["item-1"])
						, ([], ["item-2"])
						]
					, items = items
					)
				, MockTask
					( name    = "task-2"
					, itemMap =
						[ (["item-1", "item-2"], ["item-3"])
						, (["item-1", "item-2"], ["item-4"])
						]
					, items = items
					)
				, MockTask
					( name    = "task-3"
					, itemMap =
						[ (["item-1", "item-3"], ["item-5"]) ]
					, items = items
					)
				]
			, persistData     = true
			, displayProgress = false
			);
	}

	[ Test ]
	public TestConstruction() : void
	{
		def items = taskManager.Items.Map(ToMockTaskItem);

		CollectionAssert.AreEquivalent
			( expected = $[1..5].Map(n => $"item-$n")
			, actual   = items.Map(_.Path)
			, message  = "Were all items discovered?"
			);

		Assert.IsFalse
			( condition = items.Exists(item => item.LoadPath != null)
			, message   = "Were any items loaded on startup?"
			);
	}

	[ Test ]
	public TestCompute() : void
	{
		taskManager.Compute(Parameters());

		def items = taskManager.Items.Map(ToMockTaskItem).Sort((x, y) => x.CompareTo(y));

		CollectionAssert.AreEqual
			( expected = [ 1, 0, 1, 1, 1 ]
			, actual   = items.Map(_.ComputeCount)
			, message  = "Were the appropriate items computed?"
			);

		CollectionAssert.AreEqual
			( expected = [ false, true, false, false, false ]
			, actual   = items.Map(item => item.LoadPath != null)
			, message  = "Were the appropriate items loaded?"
			);

		CollectionAssert.AreEqual
			( expected = [ true, false, true, true, true ]
			, actual   = items.Map(item => item.SavePath != null)
			, message  = "Were the appropriate items saved?"
			);
	}

	private static ToMockTaskItem(item : ITaskItem) : MockTaskItem
	{
		item :> MockTaskItem
	}
}
