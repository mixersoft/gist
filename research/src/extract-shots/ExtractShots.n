using Nemerle.Collections;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Console;
using System.IO;
using System;

[ Record ]
class Photo
{
	public ID        : string;
	public DateTaken : DateTime;
	public ShotID    : string;
}

def GetPhotos()
{
	def GetInfo(record)
	{
		Photo
			( record["id"] :> string
			, DateTime.Parse(record["Photo"]["DateTaken"] :> string)
			, (record["Shot"]["id"] :> string) ?? ""
			)
	}
	using (reader = StreamReader(OpenStandardInput()))
	{
		def data = JObject.Parse(reader.ReadToEnd());
		data["response"]["castingCall"]["CastingCall"]["Auditions"]["Audition"]
			.Children()
			.MapToArray(GetInfo)
	}
}
def GetBoundaries(photos)
{
	def GetBoundary(a, b)
	{
		def (a, b) = (a.DateTaken.Ticks, b.DateTaken.Ticks);
		DateTime(a + (b - a) / 2L)
	}

	def boundaries = List();
	mutable prev = photos[0];
	foreach (photo in photos)
	{
		when (photo.ShotID != prev.ShotID)
			GetBoundary(photo, prev) |> boundaries.Add;
		prev = photo;
	}
	boundaries.ToArray();
}
def ToUnixTime(dateTime)
{
    //(dateTime - DateTime(1970, 1, 1).ToLocalTime()).TotalSeconds
    (dateTime - DateTime(1970, 1, 1)).TotalSeconds :> long
}


def photos = GetPhotos().Sort(_.DateTaken);
foreach (boundary in GetBoundaries(photos))
	WriteLine(ToUnixTime(boundary));
