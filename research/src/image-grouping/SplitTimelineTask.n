using System.IO;
using System;

[ Record ]
class SplitTimelineTask : ITask
{
	private parameters  : Parameters;
	private datasetName : string;

	public Name : string { get { "SplitTimelineTask" } }

	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		def path = Path.Combine("data", datasetName);

		def item   = items.TypedFind(item : JsonItem => item.Path == path).Value;
		def result = JsonItem(Path.Combine("simulation", Path.GetFileName(item.Path)));
		[ TaskMapping
			( inputs  = [ item ]
			, outputs = [ result ]
			, compute = () => Compute(item, result)
			)
		]
	}

	public Compute(src : JsonItem, dst : JsonItem) : void
	{
		def random = Random(0);

		def MapPhoto(photo)
		{
			JsonItem.PhotoInfo
				( id        = photo.ID
				, rootSrc   = photo.RootSrc
				, shotID    = photo.ShotID
				, cameraID  = random.Next(parameters.SimulatedTimelineCount).ToString()
				, dateTaken = photo.DateTaken
				)
		}

		dst.Photos  = src.Photos.Map(MapPhoto);
		dst.BaseUrl = src.BaseUrl;
	}
}
