using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using Nemerle.Utility;
using Profiling;
using System.IO;
using System;

[ Record ]
class ExtractDescriptorsTask : ITask
{
	private parameters : IParameters;

	public Name : string { get { "ExtractDescriptorsTask" } }

	public MapItems(items : list[ITaskItem]) : list[TaskMapping]
	{
		mutable mappings = [];
		foreach (item is ImageCollectionItem when item.Path.StartsWith(@"images\") in items)
		{
			def path = Path.Combine("descriptors", Path.GetFileName(item.Path));

			def result = DescriptorItem(path);

			mappings ::= TaskMapping
				( inputs  = [ item ]
				, outputs = [ result ]
				, compute = () => Compute(item, result)
				);
		}
		mappings;
	}

	[ Profile(Recursive) ]
	public Compute(images : ImageCollectionItem, result : DescriptorItem) : void
	{
		def ExtractDescriptor =
			match (parameters.ImageSize)
			{
			| (0, 0) =>
				fun (path)
				{
					using (image = Image.[Gray, byte](path))
						Gist.Algorithm.GetBwDescriptor(image, 4, 8, 8, 4);
				}
			| (w, h) =>
				fun (path)
				{
					using (image = Image.[Gray, byte](path))
					using (image = image.Resize(w, h, INTER.CV_INTER_LINEAR))
						Gist.Algorithm.GetBwDescriptor(image, 4, 8, 8, 4);
				}
			}
		def MakeDescriptor(id)
		{
			def FloatToDouble(n : float) { n :> double }
			def data = ExtractDescriptor(images.MakePath(id));
			DescriptorItem.Descriptor(id, data.Map(FloatToDouble))
		}
		result.Descriptors = images.ImageIDs.Map(MakeDescriptor);
	}
}
