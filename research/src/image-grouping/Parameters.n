// TARGET: library

using Nemerle.Collections;
using Nemerle.Utility;
using System.IO.File;

/// <summary>Meta-parameter source.</summary>
public interface IParameters
{
	DownloadImagePrefix : string    { get }
	ImageSize           : int * int { get }
	ClusteringThreshold : double    { get }
	ImageSampleSize     : int       { get }
}

/// <summary>Meta-parameter source that loads from "parameters.txt".</summary>
public class Parameters : IParameters
{
	[ Accessor ] private downloadImagePrefix : string;
	[ Accessor ] private imageSize           : int * int;
	[ Accessor ] private clusteringThreshold : double;
	[ Accessor ] private imageSampleSize     : int;

	public this()
	{
		def ParseSize(str)
		{
			def i = str.IndexOf(',');
			def w = int.Parse(str.Substring(0, i));
			def h = int.Parse(str.Substring(i + 1));
			(w, h);
		}

		def map = Hashtable();
		foreach (line in ReadAllLines("parameters.txt"))
		{
			def i = line.IndexOf('=');
			def name  = line.Substring(0, i).Trim();
			def value = line.Substring(i + 1).Trim();
			map.Add(name, value);
		}

		downloadImagePrefix = map["download image prefix"];
		imageSize           = ParseSize(map["image size"]);
		clusteringThreshold = double.Parse(map["clustering threshold"]);
		imageSampleSize     = int.Parse(map["image sample size"]);
	}
}

/// <summary>Meta-parameter source with fixed contents.</summary>
[ Record ]
public class MockParameters : IParameters
{
	public DownloadImagePrefix : string    { get; set }
	public ImageSize           : int * int { get; set }
	public ClusteringThreshold : double    { get; set }
	public ImageSampleSize     : int       { get; set }
}
