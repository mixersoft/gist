using Emgu.CV.CvEnum;
using Emgu.CV.ML;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using Profiling;
using System.Drawing;
using System.Math;
using System;

[assembly: ProfSetup(Enabled)]

module ProfilingHelper { [ ProfDump ] public Print() : void {} }

ProfileLocal
def GetDominantColor(path, _)
{
	def srcImage = Image.[Bgr, float](path);
	def image    = Image.[Bgr, float](srcImage.Size);

	CvInvoke.cvCvtColor
		( src  = srcImage.Ptr
		, dst  = image.Ptr
		, code = COLOR_CONVERSION.CV_BGR2Lab
		);

	def samplingStep = 2;

	def sampledRows = image.Rows / samplingStep;
	def sampledCols = image.Cols / samplingStep;

	def samples = Matrix.[float](sampledRows * sampledCols, 3);
	for (mutable c = 0; c < sampledCols; ++c)
	for (mutable r = 0; r < sampledRows; ++r)
	{
		def samplesRow = r * sampledCols + c;
		def color = image[r * samplingStep, c * samplingStep];
		samples[samplesRow, 0] = color.Red   :> float;
		samples[samplesRow, 1] = color.Green :> float;
		samples[samplesRow, 2] = color.Blue  :> float;
	}

	def labels = Matrix.[int](samples.Rows, 1);

	def centers = Matrix.[float](4, 3);

	_ = CvInvoke.cvKMeans2
		( samples      = samples.Ptr
		, clusterCount = centers.Rows
		, labels       = labels.Ptr
		, termcrit     = MCvTermCriteria(maxIteration = 10)
		, attempts     = 5
		, rng          = IntPtr.Zero
		, flags        = 0
		, centers      = centers.Ptr
		, compactness  = IntPtr.Zero
		);

	def centersImage = Image.[Bgr, float](1, centers.Rows);
	for (mutable r = 0; r != centers.Rows; ++r)
	{
		centersImage[r, 0] = Bgr
			( red   = centers[r, 0]
			, green = centers[r, 1]
			, blue  = centers[r, 2]
			);
	}

	def centers = Image.[Bgr, float](centersImage.Size);
	CvInvoke.cvCvtColor
		( src  = centersImage.Ptr
		, dst  = centers.Ptr
		, code = COLOR_CONVERSION.CV_Lab2BGR
		);

	def GetColorFromSample(i)
	{
		def Clamp(n)
		{
			Min(Max(n :> int, 0), 255)
		}
		def color = centers[i, 0];
		Color.FromArgb
			( red   = Clamp(color.Red)
			, green = Clamp(color.Green)
			, blue  = Clamp(color.Blue)
			);
	}
	$[0..centers.Rows-1].ToArray()
		.Map(GetColorFromSample);
}

def DrawBitmap(colors, path)
{
	def cellW = 64;
	def cellH = 64;
	def rowCount = colors.Length;;
	def colCount = colors[0].Length;
	using (bmp = Bitmap(cellW * colCount, cellH * rowCount))
	{
		using (gfx = Graphics.FromImage(bmp))
		{
			for (mutable row = 0; row != rowCount; ++row)
			for (mutable col = 0; col != colCount; ++col)
			{
				gfx.FillRectangle
					( SolidBrush(colors[row][col])
					, Rectangle(col * cellW, row * cellH, cellW, cellH)
					);
			}
		}
		bmp.Save(path);
	}
}

def input = @"C:\Users\Alexey\Pictures\Kary 14.jpg";
DrawBitmap
	( $[1..4].ToArray().Map(n => GetDominantColor(input, n).Sort(_.ToArgb()))
	, "dominant colours.png"
	);

ProfilingHelper.Print();
