// REFERENCE: System.Drawing.dll
// REFERENCE: System.Windows.Forms.dll
// REFERENCE: Newtonsoft.Json.dll

using System.Windows.Forms;
using Newtonsoft.Json.Linq;
using Nemerle.Collections;
using Nemerle.Utility;
using System.Drawing;
using System.IO;
using System.Threading;
using System;

using SCG = System.Collections.Generic;

[ Record ]
class ItemState
{
	public mutable ID         : string;
	public mutable Control    : Control;
	public mutable GroupStart : bool;
}

def MakeJsonPath  (name)     { Path.Combine("data", name + ".json")        }
def MakeImagePath (name, id) { Path.Combine("images", name, id + ".jpg")   }
def MakeSavePath  (name)     { Path.Combine("clusters-ref", name + ".txt") }

def LoadJson(path)
{
	def FilterDuplciates(l)
	{
		mutable set = Set();
		mutable result = [];
		foreach (x when !set.Contains(x) in l)
		{
			set = set.Add(x);
			result ::= x;
		}
		result.Reverse();
	}

	def data = JObject.Parse(File.ReadAllText(path));

	def castingCall = data["response"]["castingCall"];
	def photos      = castingCall["CastingCall"]["Auditions"]["Audition"];

	def ids = photos.Children().Map(photo => photo["id"] :> string);
	FilterDuplciates(ids).ToArray();
}
def LoadState(path, itemStates)
{
	def ReadClusters()
	{
		using (file = File.OpenText(path))
		{
			def clusters = array(int.Parse(file.ReadLine()));
			for (mutable i = 0; i != clusters.Length; ++i)
			{
				def cluster = array(int.Parse(file.ReadLine()));
				for (mutable j = 0; j != cluster.Length; ++j)
					cluster[j] = file.ReadLine();
				clusters[i] = cluster;
			}
			clusters;
		}
	}
	def SetStates(clusters)
	{
		def map = Hashtable(itemStates.Count);
		foreach (state in itemStates)
			map.Add(state.ID, state);
		mutable i = 0;
		foreach (cluster in clusters)
		{
			itemStates[i] = map[cluster[0]];
			itemStates[i].GroupStart = true;
			++i;
			for (mutable j = 1; j < cluster.Length; ++j)
			{
				itemStates[i] = map[cluster[j]];
				itemStates[i].GroupStart = false;
				++i;
			}
		}
	}
	try
	{
		SetStates(ReadClusters());
	}
	catch
	{
	| _ is FileNotFoundException => ()
	}
}
def SaveState(path, itemStates)
{
	def CreateClusters()
	{
		mutable clusters = [];
		foreach (state in itemStates with i)
		{
			when (i == 0 || state.GroupStart)
				clusters ::= [];
			clusters = (state.ID :: clusters.Head) :: clusters.Tail;
		}
		clusters.Map(_.Reverse()).Reverse();
	}
	def WriteClusters(clusters)
	{
		using (file = File.CreateText(path))
		{
			file.WriteLine(clusters.Length);
			foreach (cluster in clusters)
			{
				file.WriteLine(cluster.Length);
				foreach (id in cluster)
					file.WriteLine(id);
			}
		}
	}
	WriteClusters(CreateClusters());
}

def CreateForm(mutable name)
{
	def backgroundColor = Color.FromArgb(255, 255, 255);
	def evenGroupColor  = Color.FromArgb(51,  51,  51);
	def oddGroupColor   = Color.FromArgb(232, 232, 232);
	def selectionColor  = Color.FromArgb(185, 5,   4);

	def layout = FlowLayoutPanel();
	layout.AutoScroll = true;
	layout.BackColor  = backgroundColor;
	layout.Dock       = DockStyle.Fill;
	
	def ids = LoadJson(MakeJsonPath(name));

	def itemStates = SCG.List(ids.Length);
	mutable selection;
	def RecolorStates()
	{
		mutable even = true;
		foreach (state in itemStates)
		{
			when (state.GroupStart)
				even = !even;
			state.Control.BackColor =
				if (state == selection : object)
					selectionColor
				else
					if (even)
						evenGroupColor
					else
						oddGroupColor;
		}
	}
	def MoveSelectionTo(state)
	{
		def dst = itemStates.IndexOf(state);
		def src = itemStates.IndexOf(selection);

		_ = itemStates.RemoveAt(src);

		itemStates.Insert(dst, selection);
		layout.Controls.SetChildIndex(selection.Control, dst);
	}
	foreach (id in ids with i)
	{
		def picture = PictureBox();
		picture.AutoSize      = true;
		picture.Height        = 90;
		picture.Padding       = Padding(8);
		picture.ImageLocation = MakeImagePath(name, id);
		picture.BackColor     = evenGroupColor;

		def state = ItemState(id, picture, false);
		itemStates.Add(state);

		picture.MouseClick += fun(_, args)
		{
			match (args.Button)
			{
			| MouseButtons.Left =>
				match (selection)
				{
				| null =>
					selection = state;
				| _ =>
					MoveSelectionTo(state);
					selection = null;
				}
				RecolorStates();
			| MouseButtons.Right =>
				state.GroupStart = !state.GroupStart;
				RecolorStates();
			| _ => ()
			}
		};
	}
	LoadState(MakeSavePath(name), itemStates);
	RecolorStates();

	layout.SuspendLayout();
	foreach (state in itemStates)
		layout.Controls.Add(state.Control);
	layout.ResumeLayout();

	def form = Form();
	form.Text        = $"Select Clusters: $name";
	form.WindowState = FormWindowState.Maximized;
	form.Controls.Add(layout);

	form.Shown += fun(_)
	{
		_ = layout.Focus();
	}
	layout.KeyDown += fun(_, args)
	{
		match (args.KeyCode)
		{
		| Keys.S when args.Control =>
			SaveState(MakeSavePath(name), itemStates)
		| Keys.O when args.Control =>
			def dialog = OpenFileDialog();
			dialog.InitialDirectory = Path.GetFullPath(Path.GetDirectoryName(MakeJsonPath(name)));
			dialog.Filter   = "Json input (*.json)|*.json|All files (*.*)|*.*";
			when (DialogResult.OK == dialog.ShowDialog(form))
			{
				LoadState(dialog.FileName, itemStates);
				RecolorStates();
			}
		| Keys.End when selection != null =>
			MoveSelectionTo(itemStates[itemStates.Count - 1]);
			RecolorStates();
			selection = null;
		| Keys.Home when selection != null =>
			MoveSelectionTo(itemStates[0]);
			RecolorStates();
			selection = null;
		| _ => ()
		}
	}

	form;
}

Application.EnableVisualStyles();
Application.SetCompatibleTextRenderingDefault(false);

def form = CreateForm("venice");

def thread = Thread(ThreadStart(() => Application.Run(form)));
thread.SetApartmentState(ApartmentState.STA);
thread.Start();
