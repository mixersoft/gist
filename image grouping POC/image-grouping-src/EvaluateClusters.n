using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using Nemerle.Utility;
using Newtonsoft.Json.Linq;
using Profiling;
using System.IO;
using System.Math;
using System.Net;
using System;

using SCG = System.Collections.Generic;

class EvaluateClusters: ITask
{
	public GetInputs() : list[TaskItem]
	{
		Directory.GetFiles("clusters-ref").MapToList(path => TaskItem.File(path) : TaskItem);
	}

	public GetOutput(input : TaskItem) : TaskItem
	{
		def file = (input :> TaskItem.File).path;
		TaskItem.File(Path.Combine(Path.GetFileNameWithoutExtension(file) + "-eval.txt"));
	}

	[ Profile(Recursive) ]
	public Execute(input : TaskItem, output : TaskItem) : void
	{
		def LoadClusters(path)
		{
			using (file = File.OpenText(path))
			{
				def clusters = array(int.Parse(file.ReadLine()));
				for (mutable i = 0; i != clusters.Length; ++i)
				{
					def cluster = array(int.Parse(file.ReadLine()));
					for (mutable j = 0; j != cluster.Length; ++j)
						cluster[j] = file.ReadLine();
					clusters[i] = cluster;
				}
				clusters;
			}
		}

		def ProcessClusters(autoClusters, mutable refClusters)
		{
			def set = Set(refClusters[refClusters.Length - 1]);
			Array.Resize(ref refClusters, refClusters.Length - 1);
			( autoClusters
				.MapToArray(clusters => clusters.FilterToArray(id => !set.Contains(id)))
				.FilterToArray(clusters => clusters.Length > 0)
			, refClusters
			);
		}

		/// <summary>
		/// Number of discrepancies between two partitions of a set.
		/// Similar to <a src="http://en.wikipedia.org/wiki/Rand_index">Rand index</a>.
		/// </summary>
		def EvaluateClusters(l1, l2)
		{
			def CountPairs(n)
			{
				n * (n - 1) / 2
			}
			def GetContingencyTableSum(l1, l2)
			{
				mutable sum = 0;
				foreach (x in l1 with i)
				foreach (y in l2 with j)
					sum += CountPairs(x.Intersect(y).Count);
				sum;
			}
			def GetMarginalSum(l)
			{
				l.Fold(0, (x, sum) => sum + CountPairs(x.Count))
			}

			def l1 = l1.Map(Set);
			def l2 = l2.Map(Set);

			def ab = GetContingencyTableSum(l1, l2);
			def a  = GetMarginalSum(l1);
			def b  = GetMarginalSum(l2);

			(a + b) / 2 - ab;

		}

		def file2      = (input  :> TaskItem.File).path;
		def resultFile = (output :> TaskItem.File).path;
		def file1      = Path.Combine("clusters", Path.GetFileName(file2));

		def result = EvaluateClusters
			( ProcessClusters
				( LoadClusters(file1)
				, LoadClusters(file2)
				)
			);

		using (writer = File.CreateText(resultFile))
			writer.WriteLine(result);
	}
}
