using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using Nemerle.Utility;
using Newtonsoft.Json.Linq;
using Profiling;
using System.IO;
using System.Math;
using System.Net;
using System;

using SCG = System.Collections.Generic;

[assembly: ProfSetup(Disabled) ]

module Main
{

	[ ProfDump ]
	private PrintProfileInfo() : void
	{
	}

	private Run() : void
	{
		def parameters = Parameters();
		def tasks =
			[ DownloadData () : ITask
			, ExtractDescriptors()
			, ClusterData (parameters.ClusteringThreshold)
			, EvaluateClusters ()
			];
		tasks.Iter(TaskManager.LazyExecute);

	}

	private RunThresholdOptimization() : void
	{
		def Run(threshold)
		{
			def tasks =
				[ ( DownloadData () : ITask, true)
				, ( ExtractDescriptors(),    true)
				, ( ClusterData (threshold), false)
				, ( EvaluateClusters(),      false)
				];
			foreach ((task, lazy) in tasks)
			{
				if (lazy)
					TaskManager.LazyExecute(task)
				else
					TaskManager.Execute(task);
			}
			( threshold
			, ["venice", "peter-alice"].Map(item => (item, File.ReadAllText(item + "-eval.txt")))
			)
		}

		Console.WriteLine("Threshold Optimization");
		def results = $[1 .. 20].Map(step : int => 0.005 * step).Map(Run);
		
		using (file = File.CreateText("threshold results.txt"))
		{
			foreach ((threshold, scores) in results)
			foreach ((item, score) in scores)
				file.WriteLine($"$threshold, $item, $score");
		}
	}

	public Main() : void
	{
		mutable optimizeThreshold = false;
		mutable displayHelp       = false;
		def opts =
			[ Getopt.CliOption.Flag
				( "-optimize-threshold"
				, "Optimize the threshold meta-parameter."
				, () => optimizeThreshold = true
				)
			, Getopt.CliOption.Flag
				( "-help"
				, [ "-?" ]
				, "Display this message."
				, () => displayHelp = true
				)
			];
		Getopt.Parse(opts);

		if (displayHelp)
		{
			Console.WriteLine(Getopt.Usage(opts));
		}
		else
		{
			if (optimizeThreshold)
			{
				RunThresholdOptimization();
			}
			else
			{
				Run();
				PrintProfileInfo();
			}
		}
	}
}
