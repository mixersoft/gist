// REFERENCE: Emgu.CV.dll
// REFERENCE: Emgu.Util.dll
// REFERENCE: Profiling.dll

using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV;
using Nemerle.Collections;
using Profiling;
using System.Console;
using System.IO;
using System.Math;

using SCG = System.Collections.Generic;

[assembly: ProfSetup(Enabled) ]
module ProfilerOutput { [ ProfDump ] public Print() : void { } }

def GetImageData()
{
	def GetId(path)         { Path.GetFileNameWithoutExtension(path) }
	def GetDescriptor(path) { File.ReadAllLines(path).Map(double.Parse) }
	Directory.GetFiles(@"descriptors\venice")
		.Map(path => (GetId(path), GetDescriptor(path)));
}

def Distance(v1, v2)
{
	def Square(x) { x * x }
	mutable sum = 0.0;
	for (mutable i = 0; i != v1.Length; ++i)
		sum += Square(v1[i] - v2[i]);
	Sqrt(sum);
}

ProfileLocal(Recursive)
def Cluster(descriptors, threshold)
{
	def descriptors = SCG.List(descriptors);
	def BuildCandidateCluster(_, d1)
	{
		descriptors.Filter((_, d2) => Distance(d1, d2) < threshold);
	}
	def ChooseLargest(clusters)
	{
		mutable maxLength = 0;
		mutable maxCluster;
		foreach (cluster in clusters)
		{
			when (cluster.Length > maxLength)
			{
				maxLength  = cluster.Length;
				maxCluster = cluster;
			}
		}
		maxCluster;
	}
	def Remove(cluster)
	{
		foreach (item in cluster)
			_ = descriptors.Remove(item);
	}
	mutable clusters = [];
	while (descriptors.Count > 0)
	{
		clusters ::= ChooseLargest(descriptors.Map(BuildCandidateCluster));
		Remove(clusters.Head);
	}
	clusters.Reverse();
}

def WriteHtml(clusters, path)
{
	using (writer = File.CreateText(path))
	{
		[ "<html><body>"
		, "<head><style type='text/css'>"
		, "	.even { background-color : #C1B398 }"
		, "	.odd  { background-color : #ACCEC0 }"
		, "	span { display : block; padding : 8px; }"
		, "</style></head>"
		].Iter(writer.WriteLine);

		writer.WriteLine("<body>");

		foreach (cluster in clusters with i)
		{
			def spanClass = if (i % 2 == 0) "even" else "odd";
			writer.WriteLine($"<span class='$spanClass'>");

			foreach ((id, _) in cluster)
			{
				def src = $@"images\venice\$id.jpg";
				writer.WriteLine($"<img height='64' src='$src'>");
			}

			writer.WriteLine("</span>");
		}

		writer.WriteLine("</body></html>");
	}
}

WriteHtml(Cluster(GetImageData(), 0.4), "out.html");
ProfilerOutput.Print();
